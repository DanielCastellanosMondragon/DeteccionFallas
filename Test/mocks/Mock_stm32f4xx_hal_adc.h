/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_STM32F4XX_HAL_ADC_H
#define _MOCK_STM32F4XX_HAL_ADC_H

#include "unity.h"
#include "Mock_stm32f4xx_hal_dma.h"

typedef struct
{
  uint32_t ClockPrescaler;               /*!< Select ADC clock prescaler. The clock is common for
                                              all the ADCs.
                                              This parameter can be a value of @ref ADC_ClockPrescaler */
  uint32_t Resolution;                   /*!< Configures the ADC resolution.
                                              This parameter can be a value of @ref ADC_Resolution */
  uint32_t DataAlign;                    /*!< Specifies ADC data alignment to right (MSB on register bit 11 and LSB on register bit 0) (default setting)
                                              or to left (if regular group: MSB on register bit 15 and LSB on register bit 4, if injected group (MSB kept as signed value due to potential negative value after offset application): MSB on register bit 14 and LSB on register bit 3).
                                              This parameter can be a value of @ref ADC_Data_align */
  uint32_t ScanConvMode;                 /*!< Configures the sequencer of regular and injected groups.
                                              This parameter can be associated to parameter 'DiscontinuousConvMode' to have main sequence subdivided in successive parts.
                                              If disabled: Conversion is performed in single mode (one channel converted, the one defined in rank 1).
                                                           Parameters 'NbrOfConversion' and 'InjectedNbrOfConversion' are discarded (equivalent to set to 1).
                                              If enabled:  Conversions are performed in sequence mode (multiple ranks defined by 'NbrOfConversion'/'InjectedNbrOfConversion' and each channel rank).
                                                           Scan direction is upward: from rank1 to rank 'n'.
                                              This parameter can be set to ENABLE or DISABLE */
  uint32_t EOCSelection;                 /*!< Specifies what EOC (End Of Conversion) flag is used for conversion by polling and interruption: end of conversion of each rank or complete sequence.
                                              This parameter can be a value of @ref ADC_EOCSelection.
                                              Note: For injected group, end of conversion (flag&IT) is raised only at the end of the sequence.
                                                    Therefore, if end of conversion is set to end of each conversion, injected group should not be used with interruption (HAL_ADCEx_InjectedStart_IT)
                                                    or polling (HAL_ADCEx_InjectedStart and HAL_ADCEx_InjectedPollForConversion). By the way, polling is still possible since driver will use an estimated timing for end of injected conversion.
                                              Note: If overrun feature is intended to be used, use ADC in mode 'interruption' (function HAL_ADC_Start_IT() ) with parameter EOCSelection set to end of each conversion or in mode 'transfer by DMA' (function HAL_ADC_Start_DMA()).
                                                    If overrun feature is intended to be bypassed, use ADC in mode 'polling' or 'interruption' with parameter EOCSelection must be set to end of sequence */
  FunctionalState ContinuousConvMode;    /*!< Specifies whether the conversion is performed in single mode (one conversion) or continuous mode for regular group,
                                              after the selected trigger occurred (software start or external trigger).
                                              This parameter can be set to ENABLE or DISABLE. */
  uint32_t NbrOfConversion;              /*!< Specifies the number of ranks that will be converted within the regular group sequencer.
                                              To use regular group sequencer and convert several ranks, parameter 'ScanConvMode' must be enabled.
                                              This parameter must be a number between Min_Data = 1 and Max_Data = 16. */
  FunctionalState DiscontinuousConvMode; /*!< Specifies whether the conversions sequence of regular group is performed in Complete-sequence/Discontinuous-sequence (main sequence subdivided in successive parts).
                                              Discontinuous mode is used only if sequencer is enabled (parameter 'ScanConvMode'). If sequencer is disabled, this parameter is discarded.
                                              Discontinuous mode can be enabled only if continuous mode is disabled. If continuous mode is enabled, this parameter setting is discarded.
                                              This parameter can be set to ENABLE or DISABLE. */
  uint32_t NbrOfDiscConversion;          /*!< Specifies the number of discontinuous conversions in which the  main sequence of regular group (parameter NbrOfConversion) will be subdivided.
                                              If parameter 'DiscontinuousConvMode' is disabled, this parameter is discarded.
                                              This parameter must be a number between Min_Data = 1 and Max_Data = 8. */
  uint32_t ExternalTrigConv;             /*!< Selects the external event used to trigger the conversion start of regular group.
                                              If set to ADC_SOFTWARE_START, external triggers are disabled.
                                              If set to external trigger source, triggering is on event rising edge by default.
                                              This parameter can be a value of @ref ADC_External_trigger_Source_Regular */
  uint32_t ExternalTrigConvEdge;         /*!< Selects the external trigger edge of regular group.
                                              If trigger is set to ADC_SOFTWARE_START, this parameter is discarded.
                                              This parameter can be a value of @ref ADC_External_trigger_edge_Regular */
  FunctionalState DMAContinuousRequests; /*!< Specifies whether the DMA requests are performed in one shot mode (DMA transfer stop when number of conversions is reached)
                        or in Continuous mode (DMA transfer unlimited, whatever number of conversions).
                        Note: In continuous mode, DMA must be configured in circular mode. Otherwise an overrun will be triggered when DMA buffer maximum pointer is reached.
                        Note: This parameter must be modified when no conversion is on going on both regular and injected groups (ADC disabled, or ADC enabled without continuous mode or external trigger that could launch a conversion).
                        This parameter can be set to ENABLE or DISABLE. */
} ADC_InitTypeDef;

/**
  * @brief  Structure definition of ADC channel for regular group
  * @note   The setting of these parameters with function HAL_ADC_ConfigChannel() is conditioned to ADC state.
  *         ADC can be either disabled or enabled without conversion on going on regular group.
  */
typedef struct
{
  uint32_t Channel;                /*!< Specifies the channel to configure into ADC regular group.
                                        This parameter can be a value of @ref ADC_channels */
  uint32_t Rank;                   /*!< Specifies the rank in the regular group sequencer.
                                        This parameter must be a number between Min_Data = 1 and Max_Data = 16 */
  uint32_t SamplingTime;           /*!< Sampling time value to be set for the selected channel.
                                        Unit: ADC clock cycles
                                        Conversion time is the addition of sampling time and processing time (12 ADC clock cycles at ADC resolution 12 bits, 11 cycles at 10 bits, 9 cycles at 8 bits, 7 cycles at 6 bits).
                                        This parameter can be a value of @ref ADC_sampling_times
                                        Caution: This parameter updates the parameter property of the channel, that can be used into regular and/or injected groups.
                                                 If this same channel has been previously configured in the other group (regular/injected), it will be updated to last setting.
                                        Note: In case of usage of internal measurement channels (VrefInt/Vbat/TempSensor),
                                              sampling time constraints must be respected (sampling time can be adjusted in function of ADC clock frequency and sampling time setting)
                                              Refer to device datasheet for timings values, parameters TS_vrefint, TS_temp (values rough order: 4us min). */
  uint32_t Offset;                 /*!< Reserved for future use, can be set to 0 */
} ADC_ChannelConfTypeDef;

/**
  * @brief ADC Configuration multi-mode structure definition
  */
typedef struct
{
  uint32_t WatchdogMode;      /*!< Configures the ADC analog watchdog mode.
                                   This parameter can be a value of @ref ADC_analog_watchdog_selection */
  uint32_t HighThreshold;     /*!< Configures the ADC analog watchdog High threshold value.
                                   This parameter must be a 12-bit value. */
  uint32_t LowThreshold;      /*!< Configures the ADC analog watchdog High threshold value.
                                   This parameter must be a 12-bit value. */
  uint32_t Channel;           /*!< Configures ADC channel for the analog watchdog.
                                   This parameter has an effect only if watchdog mode is configured on single channel
                                   This parameter can be a value of @ref ADC_channels */
  FunctionalState ITMode;     /*!< Specifies whether the analog watchdog is configured
                                   is interrupt mode or in polling mode.
                                   This parameter can be set to ENABLE or DISABLE */
  uint32_t WatchdogNumber;    /*!< Reserved for future use, can be set to 0 */
} ADC_AnalogWDGConfTypeDef;

/**
  * @brief  ADC handle Structure definition
  */
typedef struct
{
  ADC_TypeDef                   *Instance;                   /*!< Register base address */

  ADC_InitTypeDef               Init;                        /*!< ADC required parameters */

  __IO uint32_t                 NbrOfCurrentConversionRank;  /*!< ADC number of current conversion rank */

  DMA_HandleTypeDef             *DMA_Handle;                 /*!< Pointer DMA Handler */

  HAL_LockTypeDef               Lock;                        /*!< ADC locking object */

  __IO uint32_t                 State;                       /*!< ADC communication state */

  __IO uint32_t                 ErrorCode;                   /*!< ADC Error code */
} ADC_HandleTypeDef;

/**
  * @brief  HAL ADC Callback ID enumeration definition
  */
typedef enum
{
  HAL_ADC_CONVERSION_COMPLETE_CB_ID     = 0x00U,  /*!< ADC conversion complete callback ID */
  HAL_ADC_CONVERSION_HALF_CB_ID         = 0x01U,  /*!< ADC conversion DMA half-transfer callback ID */
  HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID   = 0x02U,  /*!< ADC analog watchdog 1 callback ID */
  HAL_ADC_ERROR_CB_ID                   = 0x03U,  /*!< ADC error callback ID */
  HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID = 0x04U,  /*!< ADC group injected conversion complete callback ID */
  HAL_ADC_MSPINIT_CB_ID                 = 0x05U,  /*!< ADC Msp Init callback ID          */
  HAL_ADC_MSPDEINIT_CB_ID               = 0x06U   /*!< ADC Msp DeInit callback ID        */
} HAL_ADC_CallbackIDTypeDef;

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_stm32f4xx_hal_adc_Init(void);
void mock_stm32f4xx_hal_adc_Destroy(void);
void mock_stm32f4xx_hal_adc_Verify(void);




#define HAL_ADC_Init_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_Init requires _IgnoreAndReturn");
#define HAL_ADC_Init_IgnoreAndReturn(cmock_retval) HAL_ADC_Init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_Init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_ADC_Init_StopIgnore() HAL_ADC_Init_CMockStopIgnore()
void HAL_ADC_Init_CMockStopIgnore(void);
#define HAL_ADC_Init_Expect(hadc) TEST_FAIL_MESSAGE("HAL_ADC_Init requires _ExpectAndReturn");
#define HAL_ADC_Init_ExpectAndReturn(hadc, cmock_retval) HAL_ADC_Init_CMockExpectAndReturn(__LINE__, hadc, cmock_retval)
void HAL_ADC_Init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_ADC_Init_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_Init_AddCallback(CMOCK_HAL_ADC_Init_CALLBACK Callback);
void HAL_ADC_Init_Stub(CMOCK_HAL_ADC_Init_CALLBACK Callback);
#define HAL_ADC_Init_StubWithCallback HAL_ADC_Init_Stub
#define HAL_ADC_DeInit_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_DeInit requires _IgnoreAndReturn");
#define HAL_ADC_DeInit_IgnoreAndReturn(cmock_retval) HAL_ADC_DeInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_DeInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_ADC_DeInit_StopIgnore() HAL_ADC_DeInit_CMockStopIgnore()
void HAL_ADC_DeInit_CMockStopIgnore(void);
#define HAL_ADC_DeInit_Expect(hadc) TEST_FAIL_MESSAGE("HAL_ADC_DeInit requires _ExpectAndReturn");
#define HAL_ADC_DeInit_ExpectAndReturn(hadc, cmock_retval) HAL_ADC_DeInit_CMockExpectAndReturn(__LINE__, hadc, cmock_retval)
void HAL_ADC_DeInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_ADC_DeInit_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_DeInit_AddCallback(CMOCK_HAL_ADC_DeInit_CALLBACK Callback);
void HAL_ADC_DeInit_Stub(CMOCK_HAL_ADC_DeInit_CALLBACK Callback);
#define HAL_ADC_DeInit_StubWithCallback HAL_ADC_DeInit_Stub
#define HAL_ADC_MspInit_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_ADC_MspInit requires _Ignore (not AndReturn)");
#define HAL_ADC_MspInit_Ignore() HAL_ADC_MspInit_CMockIgnore()
void HAL_ADC_MspInit_CMockIgnore(void);
#define HAL_ADC_MspInit_StopIgnore() HAL_ADC_MspInit_CMockStopIgnore()
void HAL_ADC_MspInit_CMockStopIgnore(void);
#define HAL_ADC_MspInit_ExpectAndReturn(hadc, cmock_retval) TEST_FAIL_MESSAGE("HAL_ADC_MspInit requires _Expect (not AndReturn)");
#define HAL_ADC_MspInit_Expect(hadc) HAL_ADC_MspInit_CMockExpect(__LINE__, hadc)
void HAL_ADC_MspInit_CMockExpect(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc);
typedef void (* CMOCK_HAL_ADC_MspInit_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_MspInit_AddCallback(CMOCK_HAL_ADC_MspInit_CALLBACK Callback);
void HAL_ADC_MspInit_Stub(CMOCK_HAL_ADC_MspInit_CALLBACK Callback);
#define HAL_ADC_MspInit_StubWithCallback HAL_ADC_MspInit_Stub
#define HAL_ADC_MspDeInit_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_ADC_MspDeInit requires _Ignore (not AndReturn)");
#define HAL_ADC_MspDeInit_Ignore() HAL_ADC_MspDeInit_CMockIgnore()
void HAL_ADC_MspDeInit_CMockIgnore(void);
#define HAL_ADC_MspDeInit_StopIgnore() HAL_ADC_MspDeInit_CMockStopIgnore()
void HAL_ADC_MspDeInit_CMockStopIgnore(void);
#define HAL_ADC_MspDeInit_ExpectAndReturn(hadc, cmock_retval) TEST_FAIL_MESSAGE("HAL_ADC_MspDeInit requires _Expect (not AndReturn)");
#define HAL_ADC_MspDeInit_Expect(hadc) HAL_ADC_MspDeInit_CMockExpect(__LINE__, hadc)
void HAL_ADC_MspDeInit_CMockExpect(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc);
typedef void (* CMOCK_HAL_ADC_MspDeInit_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_MspDeInit_AddCallback(CMOCK_HAL_ADC_MspDeInit_CALLBACK Callback);
void HAL_ADC_MspDeInit_Stub(CMOCK_HAL_ADC_MspDeInit_CALLBACK Callback);
#define HAL_ADC_MspDeInit_StubWithCallback HAL_ADC_MspDeInit_Stub
#define HAL_ADC_Start_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_Start requires _IgnoreAndReturn");
#define HAL_ADC_Start_IgnoreAndReturn(cmock_retval) HAL_ADC_Start_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_Start_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_ADC_Start_StopIgnore() HAL_ADC_Start_CMockStopIgnore()
void HAL_ADC_Start_CMockStopIgnore(void);
#define HAL_ADC_Start_Expect(hadc) TEST_FAIL_MESSAGE("HAL_ADC_Start requires _ExpectAndReturn");
#define HAL_ADC_Start_ExpectAndReturn(hadc, cmock_retval) HAL_ADC_Start_CMockExpectAndReturn(__LINE__, hadc, cmock_retval)
void HAL_ADC_Start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_ADC_Start_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_Start_AddCallback(CMOCK_HAL_ADC_Start_CALLBACK Callback);
void HAL_ADC_Start_Stub(CMOCK_HAL_ADC_Start_CALLBACK Callback);
#define HAL_ADC_Start_StubWithCallback HAL_ADC_Start_Stub
#define HAL_ADC_Stop_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_Stop requires _IgnoreAndReturn");
#define HAL_ADC_Stop_IgnoreAndReturn(cmock_retval) HAL_ADC_Stop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_Stop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_ADC_Stop_StopIgnore() HAL_ADC_Stop_CMockStopIgnore()
void HAL_ADC_Stop_CMockStopIgnore(void);
#define HAL_ADC_Stop_Expect(hadc) TEST_FAIL_MESSAGE("HAL_ADC_Stop requires _ExpectAndReturn");
#define HAL_ADC_Stop_ExpectAndReturn(hadc, cmock_retval) HAL_ADC_Stop_CMockExpectAndReturn(__LINE__, hadc, cmock_retval)
void HAL_ADC_Stop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_ADC_Stop_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_Stop_AddCallback(CMOCK_HAL_ADC_Stop_CALLBACK Callback);
void HAL_ADC_Stop_Stub(CMOCK_HAL_ADC_Stop_CALLBACK Callback);
#define HAL_ADC_Stop_StubWithCallback HAL_ADC_Stop_Stub
#define HAL_ADC_PollForConversion_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_PollForConversion requires _IgnoreAndReturn");
#define HAL_ADC_PollForConversion_IgnoreAndReturn(cmock_retval) HAL_ADC_PollForConversion_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_PollForConversion_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_ADC_PollForConversion_StopIgnore() HAL_ADC_PollForConversion_CMockStopIgnore()
void HAL_ADC_PollForConversion_CMockStopIgnore(void);
#define HAL_ADC_PollForConversion_Expect(hadc, Timeout) TEST_FAIL_MESSAGE("HAL_ADC_PollForConversion requires _ExpectAndReturn");
#define HAL_ADC_PollForConversion_ExpectAndReturn(hadc, Timeout, cmock_retval) HAL_ADC_PollForConversion_CMockExpectAndReturn(__LINE__, hadc, Timeout, cmock_retval)
void HAL_ADC_PollForConversion_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, uint32_t Timeout, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_ADC_PollForConversion_CALLBACK)(ADC_HandleTypeDef* hadc, uint32_t Timeout, int cmock_num_calls);
void HAL_ADC_PollForConversion_AddCallback(CMOCK_HAL_ADC_PollForConversion_CALLBACK Callback);
void HAL_ADC_PollForConversion_Stub(CMOCK_HAL_ADC_PollForConversion_CALLBACK Callback);
#define HAL_ADC_PollForConversion_StubWithCallback HAL_ADC_PollForConversion_Stub
#define HAL_ADC_PollForEvent_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_PollForEvent requires _IgnoreAndReturn");
#define HAL_ADC_PollForEvent_IgnoreAndReturn(cmock_retval) HAL_ADC_PollForEvent_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_PollForEvent_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_ADC_PollForEvent_StopIgnore() HAL_ADC_PollForEvent_CMockStopIgnore()
void HAL_ADC_PollForEvent_CMockStopIgnore(void);
#define HAL_ADC_PollForEvent_Expect(hadc, EventType, Timeout) TEST_FAIL_MESSAGE("HAL_ADC_PollForEvent requires _ExpectAndReturn");
#define HAL_ADC_PollForEvent_ExpectAndReturn(hadc, EventType, Timeout, cmock_retval) HAL_ADC_PollForEvent_CMockExpectAndReturn(__LINE__, hadc, EventType, Timeout, cmock_retval)
void HAL_ADC_PollForEvent_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeout, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_ADC_PollForEvent_CALLBACK)(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeout, int cmock_num_calls);
void HAL_ADC_PollForEvent_AddCallback(CMOCK_HAL_ADC_PollForEvent_CALLBACK Callback);
void HAL_ADC_PollForEvent_Stub(CMOCK_HAL_ADC_PollForEvent_CALLBACK Callback);
#define HAL_ADC_PollForEvent_StubWithCallback HAL_ADC_PollForEvent_Stub
#define HAL_ADC_Start_IT_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_Start_IT requires _IgnoreAndReturn");
#define HAL_ADC_Start_IT_IgnoreAndReturn(cmock_retval) HAL_ADC_Start_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_Start_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_ADC_Start_IT_StopIgnore() HAL_ADC_Start_IT_CMockStopIgnore()
void HAL_ADC_Start_IT_CMockStopIgnore(void);
#define HAL_ADC_Start_IT_Expect(hadc) TEST_FAIL_MESSAGE("HAL_ADC_Start_IT requires _ExpectAndReturn");
#define HAL_ADC_Start_IT_ExpectAndReturn(hadc, cmock_retval) HAL_ADC_Start_IT_CMockExpectAndReturn(__LINE__, hadc, cmock_retval)
void HAL_ADC_Start_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_ADC_Start_IT_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_Start_IT_AddCallback(CMOCK_HAL_ADC_Start_IT_CALLBACK Callback);
void HAL_ADC_Start_IT_Stub(CMOCK_HAL_ADC_Start_IT_CALLBACK Callback);
#define HAL_ADC_Start_IT_StubWithCallback HAL_ADC_Start_IT_Stub
#define HAL_ADC_Stop_IT_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_Stop_IT requires _IgnoreAndReturn");
#define HAL_ADC_Stop_IT_IgnoreAndReturn(cmock_retval) HAL_ADC_Stop_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_Stop_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_ADC_Stop_IT_StopIgnore() HAL_ADC_Stop_IT_CMockStopIgnore()
void HAL_ADC_Stop_IT_CMockStopIgnore(void);
#define HAL_ADC_Stop_IT_Expect(hadc) TEST_FAIL_MESSAGE("HAL_ADC_Stop_IT requires _ExpectAndReturn");
#define HAL_ADC_Stop_IT_ExpectAndReturn(hadc, cmock_retval) HAL_ADC_Stop_IT_CMockExpectAndReturn(__LINE__, hadc, cmock_retval)
void HAL_ADC_Stop_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_ADC_Stop_IT_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_Stop_IT_AddCallback(CMOCK_HAL_ADC_Stop_IT_CALLBACK Callback);
void HAL_ADC_Stop_IT_Stub(CMOCK_HAL_ADC_Stop_IT_CALLBACK Callback);
#define HAL_ADC_Stop_IT_StubWithCallback HAL_ADC_Stop_IT_Stub
#define HAL_ADC_IRQHandler_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_ADC_IRQHandler requires _Ignore (not AndReturn)");
#define HAL_ADC_IRQHandler_Ignore() HAL_ADC_IRQHandler_CMockIgnore()
void HAL_ADC_IRQHandler_CMockIgnore(void);
#define HAL_ADC_IRQHandler_StopIgnore() HAL_ADC_IRQHandler_CMockStopIgnore()
void HAL_ADC_IRQHandler_CMockStopIgnore(void);
#define HAL_ADC_IRQHandler_ExpectAndReturn(hadc, cmock_retval) TEST_FAIL_MESSAGE("HAL_ADC_IRQHandler requires _Expect (not AndReturn)");
#define HAL_ADC_IRQHandler_Expect(hadc) HAL_ADC_IRQHandler_CMockExpect(__LINE__, hadc)
void HAL_ADC_IRQHandler_CMockExpect(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc);
typedef void (* CMOCK_HAL_ADC_IRQHandler_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_IRQHandler_AddCallback(CMOCK_HAL_ADC_IRQHandler_CALLBACK Callback);
void HAL_ADC_IRQHandler_Stub(CMOCK_HAL_ADC_IRQHandler_CALLBACK Callback);
#define HAL_ADC_IRQHandler_StubWithCallback HAL_ADC_IRQHandler_Stub
#define HAL_ADC_Start_DMA_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_Start_DMA requires _IgnoreAndReturn");
#define HAL_ADC_Start_DMA_IgnoreAndReturn(cmock_retval) HAL_ADC_Start_DMA_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_Start_DMA_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_ADC_Start_DMA_StopIgnore() HAL_ADC_Start_DMA_CMockStopIgnore()
void HAL_ADC_Start_DMA_CMockStopIgnore(void);
#define HAL_ADC_Start_DMA_Expect(hadc, pData, Length) TEST_FAIL_MESSAGE("HAL_ADC_Start_DMA requires _ExpectAndReturn");
#define HAL_ADC_Start_DMA_ExpectAndReturn(hadc, pData, Length, cmock_retval) HAL_ADC_Start_DMA_CMockExpectAndReturn(__LINE__, hadc, pData, Length, cmock_retval)
void HAL_ADC_Start_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_ADC_Start_DMA_CALLBACK)(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length, int cmock_num_calls);
void HAL_ADC_Start_DMA_AddCallback(CMOCK_HAL_ADC_Start_DMA_CALLBACK Callback);
void HAL_ADC_Start_DMA_Stub(CMOCK_HAL_ADC_Start_DMA_CALLBACK Callback);
#define HAL_ADC_Start_DMA_StubWithCallback HAL_ADC_Start_DMA_Stub
#define HAL_ADC_Stop_DMA_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_Stop_DMA requires _IgnoreAndReturn");
#define HAL_ADC_Stop_DMA_IgnoreAndReturn(cmock_retval) HAL_ADC_Stop_DMA_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_Stop_DMA_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_ADC_Stop_DMA_StopIgnore() HAL_ADC_Stop_DMA_CMockStopIgnore()
void HAL_ADC_Stop_DMA_CMockStopIgnore(void);
#define HAL_ADC_Stop_DMA_Expect(hadc) TEST_FAIL_MESSAGE("HAL_ADC_Stop_DMA requires _ExpectAndReturn");
#define HAL_ADC_Stop_DMA_ExpectAndReturn(hadc, cmock_retval) HAL_ADC_Stop_DMA_CMockExpectAndReturn(__LINE__, hadc, cmock_retval)
void HAL_ADC_Stop_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_ADC_Stop_DMA_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_Stop_DMA_AddCallback(CMOCK_HAL_ADC_Stop_DMA_CALLBACK Callback);
void HAL_ADC_Stop_DMA_Stub(CMOCK_HAL_ADC_Stop_DMA_CALLBACK Callback);
#define HAL_ADC_Stop_DMA_StubWithCallback HAL_ADC_Stop_DMA_Stub
#define HAL_ADC_GetValue_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_GetValue requires _IgnoreAndReturn");
#define HAL_ADC_GetValue_IgnoreAndReturn(cmock_retval) HAL_ADC_GetValue_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_GetValue_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define HAL_ADC_GetValue_StopIgnore() HAL_ADC_GetValue_CMockStopIgnore()
void HAL_ADC_GetValue_CMockStopIgnore(void);
#define HAL_ADC_GetValue_Expect(hadc) TEST_FAIL_MESSAGE("HAL_ADC_GetValue requires _ExpectAndReturn");
#define HAL_ADC_GetValue_ExpectAndReturn(hadc, cmock_retval) HAL_ADC_GetValue_CMockExpectAndReturn(__LINE__, hadc, cmock_retval)
void HAL_ADC_GetValue_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_HAL_ADC_GetValue_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_GetValue_AddCallback(CMOCK_HAL_ADC_GetValue_CALLBACK Callback);
void HAL_ADC_GetValue_Stub(CMOCK_HAL_ADC_GetValue_CALLBACK Callback);
#define HAL_ADC_GetValue_StubWithCallback HAL_ADC_GetValue_Stub
#define HAL_ADC_ConvCpltCallback_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_ADC_ConvCpltCallback requires _Ignore (not AndReturn)");
#define HAL_ADC_ConvCpltCallback_Ignore() HAL_ADC_ConvCpltCallback_CMockIgnore()
void HAL_ADC_ConvCpltCallback_CMockIgnore(void);
#define HAL_ADC_ConvCpltCallback_StopIgnore() HAL_ADC_ConvCpltCallback_CMockStopIgnore()
void HAL_ADC_ConvCpltCallback_CMockStopIgnore(void);
#define HAL_ADC_ConvCpltCallback_ExpectAndReturn(hadc, cmock_retval) TEST_FAIL_MESSAGE("HAL_ADC_ConvCpltCallback requires _Expect (not AndReturn)");
#define HAL_ADC_ConvCpltCallback_Expect(hadc) HAL_ADC_ConvCpltCallback_CMockExpect(__LINE__, hadc)
void HAL_ADC_ConvCpltCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc);
typedef void (* CMOCK_HAL_ADC_ConvCpltCallback_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_ConvCpltCallback_AddCallback(CMOCK_HAL_ADC_ConvCpltCallback_CALLBACK Callback);
void HAL_ADC_ConvCpltCallback_Stub(CMOCK_HAL_ADC_ConvCpltCallback_CALLBACK Callback);
#define HAL_ADC_ConvCpltCallback_StubWithCallback HAL_ADC_ConvCpltCallback_Stub
#define HAL_ADC_ConvHalfCpltCallback_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_ADC_ConvHalfCpltCallback requires _Ignore (not AndReturn)");
#define HAL_ADC_ConvHalfCpltCallback_Ignore() HAL_ADC_ConvHalfCpltCallback_CMockIgnore()
void HAL_ADC_ConvHalfCpltCallback_CMockIgnore(void);
#define HAL_ADC_ConvHalfCpltCallback_StopIgnore() HAL_ADC_ConvHalfCpltCallback_CMockStopIgnore()
void HAL_ADC_ConvHalfCpltCallback_CMockStopIgnore(void);
#define HAL_ADC_ConvHalfCpltCallback_ExpectAndReturn(hadc, cmock_retval) TEST_FAIL_MESSAGE("HAL_ADC_ConvHalfCpltCallback requires _Expect (not AndReturn)");
#define HAL_ADC_ConvHalfCpltCallback_Expect(hadc) HAL_ADC_ConvHalfCpltCallback_CMockExpect(__LINE__, hadc)
void HAL_ADC_ConvHalfCpltCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc);
typedef void (* CMOCK_HAL_ADC_ConvHalfCpltCallback_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_ConvHalfCpltCallback_AddCallback(CMOCK_HAL_ADC_ConvHalfCpltCallback_CALLBACK Callback);
void HAL_ADC_ConvHalfCpltCallback_Stub(CMOCK_HAL_ADC_ConvHalfCpltCallback_CALLBACK Callback);
#define HAL_ADC_ConvHalfCpltCallback_StubWithCallback HAL_ADC_ConvHalfCpltCallback_Stub
#define HAL_ADC_LevelOutOfWindowCallback_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_ADC_LevelOutOfWindowCallback requires _Ignore (not AndReturn)");
#define HAL_ADC_LevelOutOfWindowCallback_Ignore() HAL_ADC_LevelOutOfWindowCallback_CMockIgnore()
void HAL_ADC_LevelOutOfWindowCallback_CMockIgnore(void);
#define HAL_ADC_LevelOutOfWindowCallback_StopIgnore() HAL_ADC_LevelOutOfWindowCallback_CMockStopIgnore()
void HAL_ADC_LevelOutOfWindowCallback_CMockStopIgnore(void);
#define HAL_ADC_LevelOutOfWindowCallback_ExpectAndReturn(hadc, cmock_retval) TEST_FAIL_MESSAGE("HAL_ADC_LevelOutOfWindowCallback requires _Expect (not AndReturn)");
#define HAL_ADC_LevelOutOfWindowCallback_Expect(hadc) HAL_ADC_LevelOutOfWindowCallback_CMockExpect(__LINE__, hadc)
void HAL_ADC_LevelOutOfWindowCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc);
typedef void (* CMOCK_HAL_ADC_LevelOutOfWindowCallback_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_LevelOutOfWindowCallback_AddCallback(CMOCK_HAL_ADC_LevelOutOfWindowCallback_CALLBACK Callback);
void HAL_ADC_LevelOutOfWindowCallback_Stub(CMOCK_HAL_ADC_LevelOutOfWindowCallback_CALLBACK Callback);
#define HAL_ADC_LevelOutOfWindowCallback_StubWithCallback HAL_ADC_LevelOutOfWindowCallback_Stub
#define HAL_ADC_ErrorCallback_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_ADC_ErrorCallback requires _Ignore (not AndReturn)");
#define HAL_ADC_ErrorCallback_Ignore() HAL_ADC_ErrorCallback_CMockIgnore()
void HAL_ADC_ErrorCallback_CMockIgnore(void);
#define HAL_ADC_ErrorCallback_StopIgnore() HAL_ADC_ErrorCallback_CMockStopIgnore()
void HAL_ADC_ErrorCallback_CMockStopIgnore(void);
#define HAL_ADC_ErrorCallback_ExpectAndReturn(hadc, cmock_retval) TEST_FAIL_MESSAGE("HAL_ADC_ErrorCallback requires _Expect (not AndReturn)");
#define HAL_ADC_ErrorCallback_Expect(hadc) HAL_ADC_ErrorCallback_CMockExpect(__LINE__, hadc)
void HAL_ADC_ErrorCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc);
typedef void (* CMOCK_HAL_ADC_ErrorCallback_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_ErrorCallback_AddCallback(CMOCK_HAL_ADC_ErrorCallback_CALLBACK Callback);
void HAL_ADC_ErrorCallback_Stub(CMOCK_HAL_ADC_ErrorCallback_CALLBACK Callback);
#define HAL_ADC_ErrorCallback_StubWithCallback HAL_ADC_ErrorCallback_Stub
#define HAL_ADC_ConfigChannel_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_ConfigChannel requires _IgnoreAndReturn");
#define HAL_ADC_ConfigChannel_IgnoreAndReturn(cmock_retval) HAL_ADC_ConfigChannel_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_ConfigChannel_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_ADC_ConfigChannel_StopIgnore() HAL_ADC_ConfigChannel_CMockStopIgnore()
void HAL_ADC_ConfigChannel_CMockStopIgnore(void);
#define HAL_ADC_ConfigChannel_Expect(hadc, sConfig) TEST_FAIL_MESSAGE("HAL_ADC_ConfigChannel requires _ExpectAndReturn");
#define HAL_ADC_ConfigChannel_ExpectAndReturn(hadc, sConfig, cmock_retval) HAL_ADC_ConfigChannel_CMockExpectAndReturn(__LINE__, hadc, sConfig, cmock_retval)
void HAL_ADC_ConfigChannel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_ADC_ConfigChannel_CALLBACK)(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig, int cmock_num_calls);
void HAL_ADC_ConfigChannel_AddCallback(CMOCK_HAL_ADC_ConfigChannel_CALLBACK Callback);
void HAL_ADC_ConfigChannel_Stub(CMOCK_HAL_ADC_ConfigChannel_CALLBACK Callback);
#define HAL_ADC_ConfigChannel_StubWithCallback HAL_ADC_ConfigChannel_Stub
#define HAL_ADC_AnalogWDGConfig_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_AnalogWDGConfig requires _IgnoreAndReturn");
#define HAL_ADC_AnalogWDGConfig_IgnoreAndReturn(cmock_retval) HAL_ADC_AnalogWDGConfig_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_AnalogWDGConfig_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_ADC_AnalogWDGConfig_StopIgnore() HAL_ADC_AnalogWDGConfig_CMockStopIgnore()
void HAL_ADC_AnalogWDGConfig_CMockStopIgnore(void);
#define HAL_ADC_AnalogWDGConfig_Expect(hadc, AnalogWDGConfig) TEST_FAIL_MESSAGE("HAL_ADC_AnalogWDGConfig requires _ExpectAndReturn");
#define HAL_ADC_AnalogWDGConfig_ExpectAndReturn(hadc, AnalogWDGConfig, cmock_retval) HAL_ADC_AnalogWDGConfig_CMockExpectAndReturn(__LINE__, hadc, AnalogWDGConfig, cmock_retval)
void HAL_ADC_AnalogWDGConfig_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_ADC_AnalogWDGConfig_CALLBACK)(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig, int cmock_num_calls);
void HAL_ADC_AnalogWDGConfig_AddCallback(CMOCK_HAL_ADC_AnalogWDGConfig_CALLBACK Callback);
void HAL_ADC_AnalogWDGConfig_Stub(CMOCK_HAL_ADC_AnalogWDGConfig_CALLBACK Callback);
#define HAL_ADC_AnalogWDGConfig_StubWithCallback HAL_ADC_AnalogWDGConfig_Stub
#define HAL_ADC_GetState_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_GetState requires _IgnoreAndReturn");
#define HAL_ADC_GetState_IgnoreAndReturn(cmock_retval) HAL_ADC_GetState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_GetState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define HAL_ADC_GetState_StopIgnore() HAL_ADC_GetState_CMockStopIgnore()
void HAL_ADC_GetState_CMockStopIgnore(void);
#define HAL_ADC_GetState_Expect(hadc) TEST_FAIL_MESSAGE("HAL_ADC_GetState requires _ExpectAndReturn");
#define HAL_ADC_GetState_ExpectAndReturn(hadc, cmock_retval) HAL_ADC_GetState_CMockExpectAndReturn(__LINE__, hadc, cmock_retval)
void HAL_ADC_GetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_HAL_ADC_GetState_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_GetState_AddCallback(CMOCK_HAL_ADC_GetState_CALLBACK Callback);
void HAL_ADC_GetState_Stub(CMOCK_HAL_ADC_GetState_CALLBACK Callback);
#define HAL_ADC_GetState_StubWithCallback HAL_ADC_GetState_Stub
#define HAL_ADC_GetError_Ignore() TEST_FAIL_MESSAGE("HAL_ADC_GetError requires _IgnoreAndReturn");
#define HAL_ADC_GetError_IgnoreAndReturn(cmock_retval) HAL_ADC_GetError_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_ADC_GetError_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define HAL_ADC_GetError_StopIgnore() HAL_ADC_GetError_CMockStopIgnore()
void HAL_ADC_GetError_CMockStopIgnore(void);
#define HAL_ADC_GetError_Expect(hadc) TEST_FAIL_MESSAGE("HAL_ADC_GetError requires _ExpectAndReturn");
#define HAL_ADC_GetError_ExpectAndReturn(hadc, cmock_retval) HAL_ADC_GetError_CMockExpectAndReturn(__LINE__, hadc, cmock_retval)
void HAL_ADC_GetError_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ADC_HandleTypeDef* hadc, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_HAL_ADC_GetError_CALLBACK)(ADC_HandleTypeDef* hadc, int cmock_num_calls);
void HAL_ADC_GetError_AddCallback(CMOCK_HAL_ADC_GetError_CALLBACK Callback);
void HAL_ADC_GetError_Stub(CMOCK_HAL_ADC_GetError_CALLBACK Callback);
#define HAL_ADC_GetError_StubWithCallback HAL_ADC_GetError_Stub
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout);
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc);
#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
