/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_STM32F4XX_HAL_TIM_H
#define _MOCK_STM32F4XX_HAL_TIM_H

#include "unity.h"
#include "Mock_stm32f4xx_hal_def.h"
#include "Mock_stm32f4xx_hal_dma.h"
#define __IO volatile

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_stm32f4xx_hal_tim_Init(void);
void mock_stm32f4xx_hal_tim_Destroy(void);
void mock_stm32f4xx_hal_tim_Verify(void);

/** @defgroup TIM_Channel TIM Channel
  * @{
  */
#define TIM_CHANNEL_1                      0x00000000U                          /*!< Capture/compare channel 1 identifier      */
#define TIM_CHANNEL_2                      0x00000004U                          /*!< Capture/compare channel 2 identifier      */
#define TIM_CHANNEL_3                      0x00000008U                          /*!< Capture/compare channel 3 identifier      */
#define TIM_CHANNEL_4                      0x0000000CU                          /*!< Capture/compare channel 4 identifier      */
#define TIM_CHANNEL_ALL                    0x0000003CU                          /*!< Global Capture/compare channel identifier  */

typedef struct
{
  __IO uint32_t CR1;         /*!< TIM control register 1,              Address offset: 0x00 */
  __IO uint32_t CR2;         /*!< TIM control register 2,              Address offset: 0x04 */
  __IO uint32_t SMCR;        /*!< TIM slave mode control register,     Address offset: 0x08 */
  __IO uint32_t DIER;        /*!< TIM DMA/interrupt enable register,   Address offset: 0x0C */
  __IO uint32_t SR;          /*!< TIM status register,                 Address offset: 0x10 */
  __IO uint32_t EGR;         /*!< TIM event generation register,       Address offset: 0x14 */
  __IO uint32_t CCMR1;       /*!< TIM capture/compare mode register 1, Address offset: 0x18 */
  __IO uint32_t CCMR2;       /*!< TIM capture/compare mode register 2, Address offset: 0x1C */
  __IO uint32_t CCER;        /*!< TIM capture/compare enable register, Address offset: 0x20 */
  __IO uint32_t CNT;         /*!< TIM counter register,                Address offset: 0x24 */
  __IO uint32_t PSC;         /*!< TIM prescaler,                       Address offset: 0x28 */
  __IO uint32_t ARR;         /*!< TIM auto-reload register,            Address offset: 0x2C */
  __IO uint32_t RCR;         /*!< TIM repetition counter register,     Address offset: 0x30 */
  __IO uint32_t CCR1;        /*!< TIM capture/compare register 1,      Address offset: 0x34 */
  __IO uint32_t CCR2;        /*!< TIM capture/compare register 2,      Address offset: 0x38 */
  __IO uint32_t CCR3;        /*!< TIM capture/compare register 3,      Address offset: 0x3C */
  __IO uint32_t CCR4;        /*!< TIM capture/compare register 4,      Address offset: 0x40 */
  __IO uint32_t BDTR;        /*!< TIM break and dead-time register,    Address offset: 0x44 */
  __IO uint32_t DCR;         /*!< TIM DMA control register,            Address offset: 0x48 */
  __IO uint32_t DMAR;        /*!< TIM DMA address for full transfer,   Address offset: 0x4C */
  __IO uint32_t OR;          /*!< TIM option register,                 Address offset: 0x50 */
} TIM_TypeDef;

typedef struct
{
  uint32_t Prescaler;         /*!< Specifies the prescaler value used to divide the TIM clock.
                                   This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */

  uint32_t CounterMode;       /*!< Specifies the counter mode.
                                   This parameter can be a value of @ref TIM_Counter_Mode */

  uint32_t Period;            /*!< Specifies the period value to be loaded into the active
                                   Auto-Reload Register at the next update event.
                                   This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF.  */

  uint32_t ClockDivision;     /*!< Specifies the clock division.
                                   This parameter can be a value of @ref TIM_ClockDivision */

  uint32_t RepetitionCounter;  /*!< Specifies the repetition counter value. Each time the RCR downcounter
                                    reaches zero, an update event is generated and counting restarts
                                    from the RCR value (N).
                                    This means in PWM mode that (N+1) corresponds to:
                                        - the number of PWM periods in edge-aligned mode
                                        - the number of half PWM period in center-aligned mode
                                     GP timers: this parameter must be a number between Min_Data = 0x00 and
                                     Max_Data = 0xFF.
                                     Advanced timers: this parameter must be a number between Min_Data = 0x0000 and
                                     Max_Data = 0xFFFF. */

  uint32_t AutoReloadPreload;  /*!< Specifies the auto-reload preload.
                                   This parameter can be a value of @ref TIM_AutoReloadPreload */
} TIM_Base_InitTypeDef;

typedef enum
{
  HAL_TIM_ACTIVE_CHANNEL_1        = 0x01U,    /*!< The active channel is 1     */
  HAL_TIM_ACTIVE_CHANNEL_2        = 0x02U,    /*!< The active channel is 2     */
  HAL_TIM_ACTIVE_CHANNEL_3        = 0x04U,    /*!< The active channel is 3     */
  HAL_TIM_ACTIVE_CHANNEL_4        = 0x08U,    /*!< The active channel is 4     */
  HAL_TIM_ACTIVE_CHANNEL_CLEARED  = 0x00U     /*!< All active channels cleared */
} HAL_TIM_ActiveChannel;

typedef enum
{
  HAL_TIM_STATE_RESET             = 0x00U,    /*!< Peripheral not yet initialized or disabled  */
  HAL_TIM_STATE_READY             = 0x01U,    /*!< Peripheral Initialized and ready for use    */
  HAL_TIM_STATE_BUSY              = 0x02U,    /*!< An internal process is ongoing              */
  HAL_TIM_STATE_TIMEOUT           = 0x03U,    /*!< Timeout state                               */
  HAL_TIM_STATE_ERROR             = 0x04U     /*!< Reception process is ongoing                */
} HAL_TIM_StateTypeDef;

typedef enum
{
  HAL_TIM_CHANNEL_STATE_RESET             = 0x00U,    /*!< TIM Channel initial state                         */
  HAL_TIM_CHANNEL_STATE_READY             = 0x01U,    /*!< TIM Channel ready for use                         */
  HAL_TIM_CHANNEL_STATE_BUSY              = 0x02U,    /*!< An internal process is ongoing on the TIM channel */
} HAL_TIM_ChannelStateTypeDef;

typedef enum
{
  HAL_DMA_BURST_STATE_RESET             = 0x00U,    /*!< DMA Burst initial state */
  HAL_DMA_BURST_STATE_READY             = 0x01U,    /*!< DMA Burst ready for use */
  HAL_DMA_BURST_STATE_BUSY              = 0x02U,    /*!< Ongoing DMA Burst       */
} HAL_TIM_DMABurstStateTypeDef;

typedef struct
{
  TIM_TypeDef                        *Instance;         /*!< Register base address                             */
  TIM_Base_InitTypeDef               Init;              /*!< TIM Time Base required parameters                 */
  HAL_TIM_ActiveChannel              Channel;           /*!< Active channel                                    */
  DMA_HandleTypeDef                  *hdma[7];          /*!< DMA Handlers array
                                                             This array is accessed by a @ref DMA_Handle_index */
  HAL_LockTypeDef                    Lock;              /*!< Locking object                                    */
  __IO HAL_TIM_StateTypeDef          State;             /*!< TIM operation state                               */
  __IO HAL_TIM_ChannelStateTypeDef   ChannelState[4];   /*!< TIM channel operation state                       */
  __IO HAL_TIM_ChannelStateTypeDef   ChannelNState[4];  /*!< TIM complementary channel operation state         */
  __IO HAL_TIM_DMABurstStateTypeDef  DMABurstState;     /*!< DMA burst operation state                         */
} TIM_HandleTypeDef;

typedef struct
{
  uint32_t EncoderMode;   /*!< Specifies the active edge of the input signal.
                               This parameter can be a value of @ref TIM_Encoder_Mode */

  uint32_t IC1Polarity;   /*!< Specifies the active edge of the input signal.
                               This parameter can be a value of @ref TIM_Encoder_Input_Polarity */

  uint32_t IC1Selection;  /*!< Specifies the input.
                               This parameter can be a value of @ref TIM_Input_Capture_Selection */

  uint32_t IC1Prescaler;  /*!< Specifies the Input Capture Prescaler.
                               This parameter can be a value of @ref TIM_Input_Capture_Prescaler */

  uint32_t IC1Filter;     /*!< Specifies the input capture filter.
                               This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */

  uint32_t IC2Polarity;   /*!< Specifies the active edge of the input signal.
                               This parameter can be a value of @ref TIM_Encoder_Input_Polarity */

  uint32_t IC2Selection;  /*!< Specifies the input.
                              This parameter can be a value of @ref TIM_Input_Capture_Selection */

  uint32_t IC2Prescaler;  /*!< Specifies the Input Capture Prescaler.
                               This parameter can be a value of @ref TIM_Input_Capture_Prescaler */

  uint32_t IC2Filter;     /*!< Specifies the input capture filter.
                               This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */
} TIM_Encoder_InitTypeDef;

typedef struct
{
  uint32_t OCMode;        /*!< Specifies the TIM mode.
                               This parameter can be a value of @ref TIM_Output_Compare_and_PWM_modes */

  uint32_t Pulse;         /*!< Specifies the pulse value to be loaded into the Capture Compare Register.
                               This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */

  uint32_t OCPolarity;    /*!< Specifies the output polarity.
                               This parameter can be a value of @ref TIM_Output_Compare_Polarity */

  uint32_t OCNPolarity;   /*!< Specifies the complementary output polarity.
                               This parameter can be a value of @ref TIM_Output_Compare_N_Polarity
                               @note This parameter is valid only for timer instances supporting break feature. */

  uint32_t OCFastMode;    /*!< Specifies the Fast mode state.
                               This parameter can be a value of @ref TIM_Output_Fast_State
                               @note This parameter is valid only in PWM1 and PWM2 mode. */


  uint32_t OCIdleState;   /*!< Specifies the TIM Output Compare pin state during Idle state.
                               This parameter can be a value of @ref TIM_Output_Compare_Idle_State
                               @note This parameter is valid only for timer instances supporting break feature. */

  uint32_t OCNIdleState;  /*!< Specifies the TIM Output Compare pin state during Idle state.
                               This parameter can be a value of @ref TIM_Output_Compare_N_Idle_State
                               @note This parameter is valid only for timer instances supporting break feature. */
} TIM_OC_InitTypeDef;

typedef struct
{
  uint32_t  ICPolarity;  /*!< Specifies the active edge of the input signal.
                              This parameter can be a value of @ref TIM_Input_Capture_Polarity */

  uint32_t ICSelection;  /*!< Specifies the input.
                              This parameter can be a value of @ref TIM_Input_Capture_Selection */

  uint32_t ICPrescaler;  /*!< Specifies the Input Capture Prescaler.
                              This parameter can be a value of @ref TIM_Input_Capture_Prescaler */

  uint32_t ICFilter;     /*!< Specifies the input capture filter.
                              This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */
} TIM_IC_InitTypeDef;

typedef struct
{
  uint32_t OCMode;        /*!< Specifies the TIM mode.
                               This parameter can be a value of @ref TIM_Output_Compare_and_PWM_modes */

  uint32_t Pulse;         /*!< Specifies the pulse value to be loaded into the Capture Compare Register.
                               This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */

  uint32_t OCPolarity;    /*!< Specifies the output polarity.
                               This parameter can be a value of @ref TIM_Output_Compare_Polarity */

  uint32_t OCNPolarity;   /*!< Specifies the complementary output polarity.
                               This parameter can be a value of @ref TIM_Output_Compare_N_Polarity
                               @note This parameter is valid only for timer instances supporting break feature. */

  uint32_t OCIdleState;   /*!< Specifies the TIM Output Compare pin state during Idle state.
                               This parameter can be a value of @ref TIM_Output_Compare_Idle_State
                               @note This parameter is valid only for timer instances supporting break feature. */

  uint32_t OCNIdleState;  /*!< Specifies the TIM Output Compare pin state during Idle state.
                               This parameter can be a value of @ref TIM_Output_Compare_N_Idle_State
                               @note This parameter is valid only for timer instances supporting break feature. */

  uint32_t ICPolarity;    /*!< Specifies the active edge of the input signal.
                               This parameter can be a value of @ref TIM_Input_Capture_Polarity */

  uint32_t ICSelection;   /*!< Specifies the input.
                              This parameter can be a value of @ref TIM_Input_Capture_Selection */

  uint32_t ICFilter;      /*!< Specifies the input capture filter.
                              This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */
} TIM_OnePulse_InitTypeDef;

typedef struct
{
  uint32_t ClearInputState;      /*!< TIM clear Input state
                                      This parameter can be ENABLE or DISABLE */
  uint32_t ClearInputSource;     /*!< TIM clear Input sources
                                      This parameter can be a value of @ref TIM_ClearInput_Source */
  uint32_t ClearInputPolarity;   /*!< TIM Clear Input polarity
                                      This parameter can be a value of @ref TIM_ClearInput_Polarity */
  uint32_t ClearInputPrescaler;  /*!< TIM Clear Input prescaler
                                      This parameter must be 0: When OCRef clear feature is used with ETR source,
                                      ETR prescaler must be off */
  uint32_t ClearInputFilter;     /*!< TIM Clear Input filter
                                      This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */
} TIM_ClearInputConfigTypeDef;

typedef struct
{
  uint32_t ClockSource;     /*!< TIM clock sources
                                 This parameter can be a value of @ref TIM_Clock_Source */
  uint32_t ClockPolarity;   /*!< TIM clock polarity
                                 This parameter can be a value of @ref TIM_Clock_Polarity */
  uint32_t ClockPrescaler;  /*!< TIM clock prescaler
                                 This parameter can be a value of @ref TIM_Clock_Prescaler */
  uint32_t ClockFilter;     /*!< TIM clock filter
                                 This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF */
} TIM_ClockConfigTypeDef;

typedef struct
{
  uint32_t  SlaveMode;         /*!< Slave mode selection
                                    This parameter can be a value of @ref TIM_Slave_Mode */
  uint32_t  InputTrigger;      /*!< Input Trigger source
                                    This parameter can be a value of @ref TIM_Trigger_Selection */
  uint32_t  TriggerPolarity;   /*!< Input Trigger polarity
                                    This parameter can be a value of @ref TIM_Trigger_Polarity */
  uint32_t  TriggerPrescaler;  /*!< Input trigger prescaler
                                    This parameter can be a value of @ref TIM_Trigger_Prescaler */
  uint32_t  TriggerFilter;     /*!< Input trigger filter
                                    This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF  */

} TIM_SlaveConfigTypeDef;

#define HAL_TIM_Base_Init_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Base_Init requires _IgnoreAndReturn");
#define HAL_TIM_Base_Init_IgnoreAndReturn(cmock_retval) HAL_TIM_Base_Init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Base_Init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Base_Init_StopIgnore() HAL_TIM_Base_Init_CMockStopIgnore()
void HAL_TIM_Base_Init_CMockStopIgnore(void);
#define HAL_TIM_Base_Init_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_Base_Init requires _ExpectAndReturn");
#define HAL_TIM_Base_Init_ExpectAndReturn(htim, cmock_retval) HAL_TIM_Base_Init_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_Base_Init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Base_Init_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_Base_Init_AddCallback(CMOCK_HAL_TIM_Base_Init_CALLBACK Callback);
void HAL_TIM_Base_Init_Stub(CMOCK_HAL_TIM_Base_Init_CALLBACK Callback);
#define HAL_TIM_Base_Init_StubWithCallback HAL_TIM_Base_Init_Stub
#define HAL_TIM_Base_DeInit_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Base_DeInit requires _IgnoreAndReturn");
#define HAL_TIM_Base_DeInit_IgnoreAndReturn(cmock_retval) HAL_TIM_Base_DeInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Base_DeInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Base_DeInit_StopIgnore() HAL_TIM_Base_DeInit_CMockStopIgnore()
void HAL_TIM_Base_DeInit_CMockStopIgnore(void);
#define HAL_TIM_Base_DeInit_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_Base_DeInit requires _ExpectAndReturn");
#define HAL_TIM_Base_DeInit_ExpectAndReturn(htim, cmock_retval) HAL_TIM_Base_DeInit_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_Base_DeInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Base_DeInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_Base_DeInit_AddCallback(CMOCK_HAL_TIM_Base_DeInit_CALLBACK Callback);
void HAL_TIM_Base_DeInit_Stub(CMOCK_HAL_TIM_Base_DeInit_CALLBACK Callback);
#define HAL_TIM_Base_DeInit_StubWithCallback HAL_TIM_Base_DeInit_Stub
#define HAL_TIM_Base_MspInit_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_Base_MspInit requires _Ignore (not AndReturn)");
#define HAL_TIM_Base_MspInit_Ignore() HAL_TIM_Base_MspInit_CMockIgnore()
void HAL_TIM_Base_MspInit_CMockIgnore(void);
#define HAL_TIM_Base_MspInit_StopIgnore() HAL_TIM_Base_MspInit_CMockStopIgnore()
void HAL_TIM_Base_MspInit_CMockStopIgnore(void);
#define HAL_TIM_Base_MspInit_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_Base_MspInit requires _Expect (not AndReturn)");
#define HAL_TIM_Base_MspInit_Expect(htim) HAL_TIM_Base_MspInit_CMockExpect(__LINE__, htim)
void HAL_TIM_Base_MspInit_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_Base_MspInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_Base_MspInit_AddCallback(CMOCK_HAL_TIM_Base_MspInit_CALLBACK Callback);
void HAL_TIM_Base_MspInit_Stub(CMOCK_HAL_TIM_Base_MspInit_CALLBACK Callback);
#define HAL_TIM_Base_MspInit_StubWithCallback HAL_TIM_Base_MspInit_Stub
#define HAL_TIM_Base_MspDeInit_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_Base_MspDeInit requires _Ignore (not AndReturn)");
#define HAL_TIM_Base_MspDeInit_Ignore() HAL_TIM_Base_MspDeInit_CMockIgnore()
void HAL_TIM_Base_MspDeInit_CMockIgnore(void);
#define HAL_TIM_Base_MspDeInit_StopIgnore() HAL_TIM_Base_MspDeInit_CMockStopIgnore()
void HAL_TIM_Base_MspDeInit_CMockStopIgnore(void);
#define HAL_TIM_Base_MspDeInit_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_Base_MspDeInit requires _Expect (not AndReturn)");
#define HAL_TIM_Base_MspDeInit_Expect(htim) HAL_TIM_Base_MspDeInit_CMockExpect(__LINE__, htim)
void HAL_TIM_Base_MspDeInit_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_Base_MspDeInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_Base_MspDeInit_AddCallback(CMOCK_HAL_TIM_Base_MspDeInit_CALLBACK Callback);
void HAL_TIM_Base_MspDeInit_Stub(CMOCK_HAL_TIM_Base_MspDeInit_CALLBACK Callback);
#define HAL_TIM_Base_MspDeInit_StubWithCallback HAL_TIM_Base_MspDeInit_Stub
#define HAL_TIM_Base_Start_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Base_Start requires _IgnoreAndReturn");
#define HAL_TIM_Base_Start_IgnoreAndReturn(cmock_retval) HAL_TIM_Base_Start_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Base_Start_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Base_Start_StopIgnore() HAL_TIM_Base_Start_CMockStopIgnore()
void HAL_TIM_Base_Start_CMockStopIgnore(void);
#define HAL_TIM_Base_Start_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_Base_Start requires _ExpectAndReturn");
#define HAL_TIM_Base_Start_ExpectAndReturn(htim, cmock_retval) HAL_TIM_Base_Start_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_Base_Start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Base_Start_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_Base_Start_AddCallback(CMOCK_HAL_TIM_Base_Start_CALLBACK Callback);
void HAL_TIM_Base_Start_Stub(CMOCK_HAL_TIM_Base_Start_CALLBACK Callback);
#define HAL_TIM_Base_Start_StubWithCallback HAL_TIM_Base_Start_Stub
#define HAL_TIM_Base_Stop_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Base_Stop requires _IgnoreAndReturn");
#define HAL_TIM_Base_Stop_IgnoreAndReturn(cmock_retval) HAL_TIM_Base_Stop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Base_Stop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Base_Stop_StopIgnore() HAL_TIM_Base_Stop_CMockStopIgnore()
void HAL_TIM_Base_Stop_CMockStopIgnore(void);
#define HAL_TIM_Base_Stop_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_Base_Stop requires _ExpectAndReturn");
#define HAL_TIM_Base_Stop_ExpectAndReturn(htim, cmock_retval) HAL_TIM_Base_Stop_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_Base_Stop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Base_Stop_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_Base_Stop_AddCallback(CMOCK_HAL_TIM_Base_Stop_CALLBACK Callback);
void HAL_TIM_Base_Stop_Stub(CMOCK_HAL_TIM_Base_Stop_CALLBACK Callback);
#define HAL_TIM_Base_Stop_StubWithCallback HAL_TIM_Base_Stop_Stub
#define HAL_TIM_Base_Start_IT_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Base_Start_IT requires _IgnoreAndReturn");
#define HAL_TIM_Base_Start_IT_IgnoreAndReturn(cmock_retval) HAL_TIM_Base_Start_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Base_Start_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Base_Start_IT_StopIgnore() HAL_TIM_Base_Start_IT_CMockStopIgnore()
void HAL_TIM_Base_Start_IT_CMockStopIgnore(void);
#define HAL_TIM_Base_Start_IT_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_Base_Start_IT requires _ExpectAndReturn");
#define HAL_TIM_Base_Start_IT_ExpectAndReturn(htim, cmock_retval) HAL_TIM_Base_Start_IT_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_Base_Start_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Base_Start_IT_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_Base_Start_IT_AddCallback(CMOCK_HAL_TIM_Base_Start_IT_CALLBACK Callback);
void HAL_TIM_Base_Start_IT_Stub(CMOCK_HAL_TIM_Base_Start_IT_CALLBACK Callback);
#define HAL_TIM_Base_Start_IT_StubWithCallback HAL_TIM_Base_Start_IT_Stub
#define HAL_TIM_Base_Stop_IT_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Base_Stop_IT requires _IgnoreAndReturn");
#define HAL_TIM_Base_Stop_IT_IgnoreAndReturn(cmock_retval) HAL_TIM_Base_Stop_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Base_Stop_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Base_Stop_IT_StopIgnore() HAL_TIM_Base_Stop_IT_CMockStopIgnore()
void HAL_TIM_Base_Stop_IT_CMockStopIgnore(void);
#define HAL_TIM_Base_Stop_IT_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_Base_Stop_IT requires _ExpectAndReturn");
#define HAL_TIM_Base_Stop_IT_ExpectAndReturn(htim, cmock_retval) HAL_TIM_Base_Stop_IT_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_Base_Stop_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Base_Stop_IT_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_Base_Stop_IT_AddCallback(CMOCK_HAL_TIM_Base_Stop_IT_CALLBACK Callback);
void HAL_TIM_Base_Stop_IT_Stub(CMOCK_HAL_TIM_Base_Stop_IT_CALLBACK Callback);
#define HAL_TIM_Base_Stop_IT_StubWithCallback HAL_TIM_Base_Stop_IT_Stub
#define HAL_TIM_Base_Start_DMA_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Base_Start_DMA requires _IgnoreAndReturn");
#define HAL_TIM_Base_Start_DMA_IgnoreAndReturn(cmock_retval) HAL_TIM_Base_Start_DMA_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Base_Start_DMA_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Base_Start_DMA_StopIgnore() HAL_TIM_Base_Start_DMA_CMockStopIgnore()
void HAL_TIM_Base_Start_DMA_CMockStopIgnore(void);
#define HAL_TIM_Base_Start_DMA_Expect(htim, pData, Length) TEST_FAIL_MESSAGE("HAL_TIM_Base_Start_DMA requires _ExpectAndReturn");
#define HAL_TIM_Base_Start_DMA_ExpectAndReturn(htim, pData, Length, cmock_retval) HAL_TIM_Base_Start_DMA_CMockExpectAndReturn(__LINE__, htim, pData, Length, cmock_retval)
void HAL_TIM_Base_Start_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, const uint32_t* pData, uint16_t Length, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Base_Start_DMA_CALLBACK)(TIM_HandleTypeDef* htim, const uint32_t* pData, uint16_t Length, int cmock_num_calls);
void HAL_TIM_Base_Start_DMA_AddCallback(CMOCK_HAL_TIM_Base_Start_DMA_CALLBACK Callback);
void HAL_TIM_Base_Start_DMA_Stub(CMOCK_HAL_TIM_Base_Start_DMA_CALLBACK Callback);
#define HAL_TIM_Base_Start_DMA_StubWithCallback HAL_TIM_Base_Start_DMA_Stub
#define HAL_TIM_Base_Stop_DMA_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Base_Stop_DMA requires _IgnoreAndReturn");
#define HAL_TIM_Base_Stop_DMA_IgnoreAndReturn(cmock_retval) HAL_TIM_Base_Stop_DMA_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Base_Stop_DMA_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Base_Stop_DMA_StopIgnore() HAL_TIM_Base_Stop_DMA_CMockStopIgnore()
void HAL_TIM_Base_Stop_DMA_CMockStopIgnore(void);
#define HAL_TIM_Base_Stop_DMA_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_Base_Stop_DMA requires _ExpectAndReturn");
#define HAL_TIM_Base_Stop_DMA_ExpectAndReturn(htim, cmock_retval) HAL_TIM_Base_Stop_DMA_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_Base_Stop_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Base_Stop_DMA_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_Base_Stop_DMA_AddCallback(CMOCK_HAL_TIM_Base_Stop_DMA_CALLBACK Callback);
void HAL_TIM_Base_Stop_DMA_Stub(CMOCK_HAL_TIM_Base_Stop_DMA_CALLBACK Callback);
#define HAL_TIM_Base_Stop_DMA_StubWithCallback HAL_TIM_Base_Stop_DMA_Stub
#define HAL_TIM_OC_Init_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OC_Init requires _IgnoreAndReturn");
#define HAL_TIM_OC_Init_IgnoreAndReturn(cmock_retval) HAL_TIM_OC_Init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OC_Init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OC_Init_StopIgnore() HAL_TIM_OC_Init_CMockStopIgnore()
void HAL_TIM_OC_Init_CMockStopIgnore(void);
#define HAL_TIM_OC_Init_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_OC_Init requires _ExpectAndReturn");
#define HAL_TIM_OC_Init_ExpectAndReturn(htim, cmock_retval) HAL_TIM_OC_Init_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_OC_Init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OC_Init_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_OC_Init_AddCallback(CMOCK_HAL_TIM_OC_Init_CALLBACK Callback);
void HAL_TIM_OC_Init_Stub(CMOCK_HAL_TIM_OC_Init_CALLBACK Callback);
#define HAL_TIM_OC_Init_StubWithCallback HAL_TIM_OC_Init_Stub
#define HAL_TIM_OC_DeInit_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OC_DeInit requires _IgnoreAndReturn");
#define HAL_TIM_OC_DeInit_IgnoreAndReturn(cmock_retval) HAL_TIM_OC_DeInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OC_DeInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OC_DeInit_StopIgnore() HAL_TIM_OC_DeInit_CMockStopIgnore()
void HAL_TIM_OC_DeInit_CMockStopIgnore(void);
#define HAL_TIM_OC_DeInit_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_OC_DeInit requires _ExpectAndReturn");
#define HAL_TIM_OC_DeInit_ExpectAndReturn(htim, cmock_retval) HAL_TIM_OC_DeInit_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_OC_DeInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OC_DeInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_OC_DeInit_AddCallback(CMOCK_HAL_TIM_OC_DeInit_CALLBACK Callback);
void HAL_TIM_OC_DeInit_Stub(CMOCK_HAL_TIM_OC_DeInit_CALLBACK Callback);
#define HAL_TIM_OC_DeInit_StubWithCallback HAL_TIM_OC_DeInit_Stub
#define HAL_TIM_OC_MspInit_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_OC_MspInit requires _Ignore (not AndReturn)");
#define HAL_TIM_OC_MspInit_Ignore() HAL_TIM_OC_MspInit_CMockIgnore()
void HAL_TIM_OC_MspInit_CMockIgnore(void);
#define HAL_TIM_OC_MspInit_StopIgnore() HAL_TIM_OC_MspInit_CMockStopIgnore()
void HAL_TIM_OC_MspInit_CMockStopIgnore(void);
#define HAL_TIM_OC_MspInit_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_OC_MspInit requires _Expect (not AndReturn)");
#define HAL_TIM_OC_MspInit_Expect(htim) HAL_TIM_OC_MspInit_CMockExpect(__LINE__, htim)
void HAL_TIM_OC_MspInit_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_OC_MspInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_OC_MspInit_AddCallback(CMOCK_HAL_TIM_OC_MspInit_CALLBACK Callback);
void HAL_TIM_OC_MspInit_Stub(CMOCK_HAL_TIM_OC_MspInit_CALLBACK Callback);
#define HAL_TIM_OC_MspInit_StubWithCallback HAL_TIM_OC_MspInit_Stub
#define HAL_TIM_OC_MspDeInit_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_OC_MspDeInit requires _Ignore (not AndReturn)");
#define HAL_TIM_OC_MspDeInit_Ignore() HAL_TIM_OC_MspDeInit_CMockIgnore()
void HAL_TIM_OC_MspDeInit_CMockIgnore(void);
#define HAL_TIM_OC_MspDeInit_StopIgnore() HAL_TIM_OC_MspDeInit_CMockStopIgnore()
void HAL_TIM_OC_MspDeInit_CMockStopIgnore(void);
#define HAL_TIM_OC_MspDeInit_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_OC_MspDeInit requires _Expect (not AndReturn)");
#define HAL_TIM_OC_MspDeInit_Expect(htim) HAL_TIM_OC_MspDeInit_CMockExpect(__LINE__, htim)
void HAL_TIM_OC_MspDeInit_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_OC_MspDeInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_OC_MspDeInit_AddCallback(CMOCK_HAL_TIM_OC_MspDeInit_CALLBACK Callback);
void HAL_TIM_OC_MspDeInit_Stub(CMOCK_HAL_TIM_OC_MspDeInit_CALLBACK Callback);
#define HAL_TIM_OC_MspDeInit_StubWithCallback HAL_TIM_OC_MspDeInit_Stub
#define HAL_TIM_OC_Start_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OC_Start requires _IgnoreAndReturn");
#define HAL_TIM_OC_Start_IgnoreAndReturn(cmock_retval) HAL_TIM_OC_Start_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OC_Start_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OC_Start_StopIgnore() HAL_TIM_OC_Start_CMockStopIgnore()
void HAL_TIM_OC_Start_CMockStopIgnore(void);
#define HAL_TIM_OC_Start_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_OC_Start requires _ExpectAndReturn");
#define HAL_TIM_OC_Start_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_OC_Start_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_OC_Start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OC_Start_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_OC_Start_AddCallback(CMOCK_HAL_TIM_OC_Start_CALLBACK Callback);
void HAL_TIM_OC_Start_Stub(CMOCK_HAL_TIM_OC_Start_CALLBACK Callback);
#define HAL_TIM_OC_Start_StubWithCallback HAL_TIM_OC_Start_Stub
#define HAL_TIM_OC_Stop_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OC_Stop requires _IgnoreAndReturn");
#define HAL_TIM_OC_Stop_IgnoreAndReturn(cmock_retval) HAL_TIM_OC_Stop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OC_Stop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OC_Stop_StopIgnore() HAL_TIM_OC_Stop_CMockStopIgnore()
void HAL_TIM_OC_Stop_CMockStopIgnore(void);
#define HAL_TIM_OC_Stop_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_OC_Stop requires _ExpectAndReturn");
#define HAL_TIM_OC_Stop_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_OC_Stop_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_OC_Stop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OC_Stop_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_OC_Stop_AddCallback(CMOCK_HAL_TIM_OC_Stop_CALLBACK Callback);
void HAL_TIM_OC_Stop_Stub(CMOCK_HAL_TIM_OC_Stop_CALLBACK Callback);
#define HAL_TIM_OC_Stop_StubWithCallback HAL_TIM_OC_Stop_Stub
#define HAL_TIM_OC_Start_IT_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OC_Start_IT requires _IgnoreAndReturn");
#define HAL_TIM_OC_Start_IT_IgnoreAndReturn(cmock_retval) HAL_TIM_OC_Start_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OC_Start_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OC_Start_IT_StopIgnore() HAL_TIM_OC_Start_IT_CMockStopIgnore()
void HAL_TIM_OC_Start_IT_CMockStopIgnore(void);
#define HAL_TIM_OC_Start_IT_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_OC_Start_IT requires _ExpectAndReturn");
#define HAL_TIM_OC_Start_IT_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_OC_Start_IT_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_OC_Start_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OC_Start_IT_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_OC_Start_IT_AddCallback(CMOCK_HAL_TIM_OC_Start_IT_CALLBACK Callback);
void HAL_TIM_OC_Start_IT_Stub(CMOCK_HAL_TIM_OC_Start_IT_CALLBACK Callback);
#define HAL_TIM_OC_Start_IT_StubWithCallback HAL_TIM_OC_Start_IT_Stub
#define HAL_TIM_OC_Stop_IT_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OC_Stop_IT requires _IgnoreAndReturn");
#define HAL_TIM_OC_Stop_IT_IgnoreAndReturn(cmock_retval) HAL_TIM_OC_Stop_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OC_Stop_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OC_Stop_IT_StopIgnore() HAL_TIM_OC_Stop_IT_CMockStopIgnore()
void HAL_TIM_OC_Stop_IT_CMockStopIgnore(void);
#define HAL_TIM_OC_Stop_IT_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_OC_Stop_IT requires _ExpectAndReturn");
#define HAL_TIM_OC_Stop_IT_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_OC_Stop_IT_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_OC_Stop_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OC_Stop_IT_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_OC_Stop_IT_AddCallback(CMOCK_HAL_TIM_OC_Stop_IT_CALLBACK Callback);
void HAL_TIM_OC_Stop_IT_Stub(CMOCK_HAL_TIM_OC_Stop_IT_CALLBACK Callback);
#define HAL_TIM_OC_Stop_IT_StubWithCallback HAL_TIM_OC_Stop_IT_Stub
#define HAL_TIM_OC_Start_DMA_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OC_Start_DMA requires _IgnoreAndReturn");
#define HAL_TIM_OC_Start_DMA_IgnoreAndReturn(cmock_retval) HAL_TIM_OC_Start_DMA_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OC_Start_DMA_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OC_Start_DMA_StopIgnore() HAL_TIM_OC_Start_DMA_CMockStopIgnore()
void HAL_TIM_OC_Start_DMA_CMockStopIgnore(void);
#define HAL_TIM_OC_Start_DMA_Expect(htim, Channel, pData, Length) TEST_FAIL_MESSAGE("HAL_TIM_OC_Start_DMA requires _ExpectAndReturn");
#define HAL_TIM_OC_Start_DMA_ExpectAndReturn(htim, Channel, pData, Length, cmock_retval) HAL_TIM_OC_Start_DMA_CMockExpectAndReturn(__LINE__, htim, Channel, pData, Length, cmock_retval)
void HAL_TIM_OC_Start_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, const uint32_t* pData, uint16_t Length, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OC_Start_DMA_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, const uint32_t* pData, uint16_t Length, int cmock_num_calls);
void HAL_TIM_OC_Start_DMA_AddCallback(CMOCK_HAL_TIM_OC_Start_DMA_CALLBACK Callback);
void HAL_TIM_OC_Start_DMA_Stub(CMOCK_HAL_TIM_OC_Start_DMA_CALLBACK Callback);
#define HAL_TIM_OC_Start_DMA_StubWithCallback HAL_TIM_OC_Start_DMA_Stub
#define HAL_TIM_OC_Stop_DMA_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OC_Stop_DMA requires _IgnoreAndReturn");
#define HAL_TIM_OC_Stop_DMA_IgnoreAndReturn(cmock_retval) HAL_TIM_OC_Stop_DMA_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OC_Stop_DMA_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OC_Stop_DMA_StopIgnore() HAL_TIM_OC_Stop_DMA_CMockStopIgnore()
void HAL_TIM_OC_Stop_DMA_CMockStopIgnore(void);
#define HAL_TIM_OC_Stop_DMA_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_OC_Stop_DMA requires _ExpectAndReturn");
#define HAL_TIM_OC_Stop_DMA_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_OC_Stop_DMA_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_OC_Stop_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OC_Stop_DMA_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_OC_Stop_DMA_AddCallback(CMOCK_HAL_TIM_OC_Stop_DMA_CALLBACK Callback);
void HAL_TIM_OC_Stop_DMA_Stub(CMOCK_HAL_TIM_OC_Stop_DMA_CALLBACK Callback);
#define HAL_TIM_OC_Stop_DMA_StubWithCallback HAL_TIM_OC_Stop_DMA_Stub
#define HAL_TIM_PWM_Init_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_PWM_Init requires _IgnoreAndReturn");
#define HAL_TIM_PWM_Init_IgnoreAndReturn(cmock_retval) HAL_TIM_PWM_Init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_PWM_Init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_PWM_Init_StopIgnore() HAL_TIM_PWM_Init_CMockStopIgnore()
void HAL_TIM_PWM_Init_CMockStopIgnore(void);
#define HAL_TIM_PWM_Init_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_PWM_Init requires _ExpectAndReturn");
#define HAL_TIM_PWM_Init_ExpectAndReturn(htim, cmock_retval) HAL_TIM_PWM_Init_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_PWM_Init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_PWM_Init_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_PWM_Init_AddCallback(CMOCK_HAL_TIM_PWM_Init_CALLBACK Callback);
void HAL_TIM_PWM_Init_Stub(CMOCK_HAL_TIM_PWM_Init_CALLBACK Callback);
#define HAL_TIM_PWM_Init_StubWithCallback HAL_TIM_PWM_Init_Stub
#define HAL_TIM_PWM_DeInit_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_PWM_DeInit requires _IgnoreAndReturn");
#define HAL_TIM_PWM_DeInit_IgnoreAndReturn(cmock_retval) HAL_TIM_PWM_DeInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_PWM_DeInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_PWM_DeInit_StopIgnore() HAL_TIM_PWM_DeInit_CMockStopIgnore()
void HAL_TIM_PWM_DeInit_CMockStopIgnore(void);
#define HAL_TIM_PWM_DeInit_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_PWM_DeInit requires _ExpectAndReturn");
#define HAL_TIM_PWM_DeInit_ExpectAndReturn(htim, cmock_retval) HAL_TIM_PWM_DeInit_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_PWM_DeInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_PWM_DeInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_PWM_DeInit_AddCallback(CMOCK_HAL_TIM_PWM_DeInit_CALLBACK Callback);
void HAL_TIM_PWM_DeInit_Stub(CMOCK_HAL_TIM_PWM_DeInit_CALLBACK Callback);
#define HAL_TIM_PWM_DeInit_StubWithCallback HAL_TIM_PWM_DeInit_Stub
#define HAL_TIM_PWM_MspInit_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_PWM_MspInit requires _Ignore (not AndReturn)");
#define HAL_TIM_PWM_MspInit_Ignore() HAL_TIM_PWM_MspInit_CMockIgnore()
void HAL_TIM_PWM_MspInit_CMockIgnore(void);
#define HAL_TIM_PWM_MspInit_StopIgnore() HAL_TIM_PWM_MspInit_CMockStopIgnore()
void HAL_TIM_PWM_MspInit_CMockStopIgnore(void);
#define HAL_TIM_PWM_MspInit_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_PWM_MspInit requires _Expect (not AndReturn)");
#define HAL_TIM_PWM_MspInit_Expect(htim) HAL_TIM_PWM_MspInit_CMockExpect(__LINE__, htim)
void HAL_TIM_PWM_MspInit_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_PWM_MspInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_PWM_MspInit_AddCallback(CMOCK_HAL_TIM_PWM_MspInit_CALLBACK Callback);
void HAL_TIM_PWM_MspInit_Stub(CMOCK_HAL_TIM_PWM_MspInit_CALLBACK Callback);
#define HAL_TIM_PWM_MspInit_StubWithCallback HAL_TIM_PWM_MspInit_Stub
#define HAL_TIM_PWM_MspDeInit_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_PWM_MspDeInit requires _Ignore (not AndReturn)");
#define HAL_TIM_PWM_MspDeInit_Ignore() HAL_TIM_PWM_MspDeInit_CMockIgnore()
void HAL_TIM_PWM_MspDeInit_CMockIgnore(void);
#define HAL_TIM_PWM_MspDeInit_StopIgnore() HAL_TIM_PWM_MspDeInit_CMockStopIgnore()
void HAL_TIM_PWM_MspDeInit_CMockStopIgnore(void);
#define HAL_TIM_PWM_MspDeInit_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_PWM_MspDeInit requires _Expect (not AndReturn)");
#define HAL_TIM_PWM_MspDeInit_Expect(htim) HAL_TIM_PWM_MspDeInit_CMockExpect(__LINE__, htim)
void HAL_TIM_PWM_MspDeInit_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_PWM_MspDeInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_PWM_MspDeInit_AddCallback(CMOCK_HAL_TIM_PWM_MspDeInit_CALLBACK Callback);
void HAL_TIM_PWM_MspDeInit_Stub(CMOCK_HAL_TIM_PWM_MspDeInit_CALLBACK Callback);
#define HAL_TIM_PWM_MspDeInit_StubWithCallback HAL_TIM_PWM_MspDeInit_Stub
#define HAL_TIM_PWM_Start_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_PWM_Start requires _IgnoreAndReturn");
#define HAL_TIM_PWM_Start_IgnoreAndReturn(cmock_retval) HAL_TIM_PWM_Start_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_PWM_Start_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_PWM_Start_StopIgnore() HAL_TIM_PWM_Start_CMockStopIgnore()
void HAL_TIM_PWM_Start_CMockStopIgnore(void);
#define HAL_TIM_PWM_Start_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_PWM_Start requires _ExpectAndReturn");
#define HAL_TIM_PWM_Start_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_PWM_Start_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_PWM_Start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_PWM_Start_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_PWM_Start_AddCallback(CMOCK_HAL_TIM_PWM_Start_CALLBACK Callback);
void HAL_TIM_PWM_Start_Stub(CMOCK_HAL_TIM_PWM_Start_CALLBACK Callback);
#define HAL_TIM_PWM_Start_StubWithCallback HAL_TIM_PWM_Start_Stub
#define HAL_TIM_PWM_Stop_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_PWM_Stop requires _IgnoreAndReturn");
#define HAL_TIM_PWM_Stop_IgnoreAndReturn(cmock_retval) HAL_TIM_PWM_Stop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_PWM_Stop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_PWM_Stop_StopIgnore() HAL_TIM_PWM_Stop_CMockStopIgnore()
void HAL_TIM_PWM_Stop_CMockStopIgnore(void);
#define HAL_TIM_PWM_Stop_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_PWM_Stop requires _ExpectAndReturn");
#define HAL_TIM_PWM_Stop_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_PWM_Stop_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_PWM_Stop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_PWM_Stop_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_PWM_Stop_AddCallback(CMOCK_HAL_TIM_PWM_Stop_CALLBACK Callback);
void HAL_TIM_PWM_Stop_Stub(CMOCK_HAL_TIM_PWM_Stop_CALLBACK Callback);
#define HAL_TIM_PWM_Stop_StubWithCallback HAL_TIM_PWM_Stop_Stub
#define HAL_TIM_PWM_Start_IT_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_PWM_Start_IT requires _IgnoreAndReturn");
#define HAL_TIM_PWM_Start_IT_IgnoreAndReturn(cmock_retval) HAL_TIM_PWM_Start_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_PWM_Start_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_PWM_Start_IT_StopIgnore() HAL_TIM_PWM_Start_IT_CMockStopIgnore()
void HAL_TIM_PWM_Start_IT_CMockStopIgnore(void);
#define HAL_TIM_PWM_Start_IT_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_PWM_Start_IT requires _ExpectAndReturn");
#define HAL_TIM_PWM_Start_IT_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_PWM_Start_IT_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_PWM_Start_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_PWM_Start_IT_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_PWM_Start_IT_AddCallback(CMOCK_HAL_TIM_PWM_Start_IT_CALLBACK Callback);
void HAL_TIM_PWM_Start_IT_Stub(CMOCK_HAL_TIM_PWM_Start_IT_CALLBACK Callback);
#define HAL_TIM_PWM_Start_IT_StubWithCallback HAL_TIM_PWM_Start_IT_Stub
#define HAL_TIM_PWM_Stop_IT_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_PWM_Stop_IT requires _IgnoreAndReturn");
#define HAL_TIM_PWM_Stop_IT_IgnoreAndReturn(cmock_retval) HAL_TIM_PWM_Stop_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_PWM_Stop_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_PWM_Stop_IT_StopIgnore() HAL_TIM_PWM_Stop_IT_CMockStopIgnore()
void HAL_TIM_PWM_Stop_IT_CMockStopIgnore(void);
#define HAL_TIM_PWM_Stop_IT_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_PWM_Stop_IT requires _ExpectAndReturn");
#define HAL_TIM_PWM_Stop_IT_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_PWM_Stop_IT_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_PWM_Stop_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_PWM_Stop_IT_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_PWM_Stop_IT_AddCallback(CMOCK_HAL_TIM_PWM_Stop_IT_CALLBACK Callback);
void HAL_TIM_PWM_Stop_IT_Stub(CMOCK_HAL_TIM_PWM_Stop_IT_CALLBACK Callback);
#define HAL_TIM_PWM_Stop_IT_StubWithCallback HAL_TIM_PWM_Stop_IT_Stub
#define HAL_TIM_PWM_Start_DMA_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_PWM_Start_DMA requires _IgnoreAndReturn");
#define HAL_TIM_PWM_Start_DMA_IgnoreAndReturn(cmock_retval) HAL_TIM_PWM_Start_DMA_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_PWM_Start_DMA_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_PWM_Start_DMA_StopIgnore() HAL_TIM_PWM_Start_DMA_CMockStopIgnore()
void HAL_TIM_PWM_Start_DMA_CMockStopIgnore(void);
#define HAL_TIM_PWM_Start_DMA_Expect(htim, Channel, pData, Length) TEST_FAIL_MESSAGE("HAL_TIM_PWM_Start_DMA requires _ExpectAndReturn");
#define HAL_TIM_PWM_Start_DMA_ExpectAndReturn(htim, Channel, pData, Length, cmock_retval) HAL_TIM_PWM_Start_DMA_CMockExpectAndReturn(__LINE__, htim, Channel, pData, Length, cmock_retval)
void HAL_TIM_PWM_Start_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, const uint32_t* pData, uint16_t Length, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_PWM_Start_DMA_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, const uint32_t* pData, uint16_t Length, int cmock_num_calls);
void HAL_TIM_PWM_Start_DMA_AddCallback(CMOCK_HAL_TIM_PWM_Start_DMA_CALLBACK Callback);
void HAL_TIM_PWM_Start_DMA_Stub(CMOCK_HAL_TIM_PWM_Start_DMA_CALLBACK Callback);
#define HAL_TIM_PWM_Start_DMA_StubWithCallback HAL_TIM_PWM_Start_DMA_Stub
#define HAL_TIM_PWM_Stop_DMA_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_PWM_Stop_DMA requires _IgnoreAndReturn");
#define HAL_TIM_PWM_Stop_DMA_IgnoreAndReturn(cmock_retval) HAL_TIM_PWM_Stop_DMA_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_PWM_Stop_DMA_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_PWM_Stop_DMA_StopIgnore() HAL_TIM_PWM_Stop_DMA_CMockStopIgnore()
void HAL_TIM_PWM_Stop_DMA_CMockStopIgnore(void);
#define HAL_TIM_PWM_Stop_DMA_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_PWM_Stop_DMA requires _ExpectAndReturn");
#define HAL_TIM_PWM_Stop_DMA_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_PWM_Stop_DMA_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_PWM_Stop_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_PWM_Stop_DMA_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_PWM_Stop_DMA_AddCallback(CMOCK_HAL_TIM_PWM_Stop_DMA_CALLBACK Callback);
void HAL_TIM_PWM_Stop_DMA_Stub(CMOCK_HAL_TIM_PWM_Stop_DMA_CALLBACK Callback);
#define HAL_TIM_PWM_Stop_DMA_StubWithCallback HAL_TIM_PWM_Stop_DMA_Stub
#define HAL_TIM_IC_Init_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_IC_Init requires _IgnoreAndReturn");
#define HAL_TIM_IC_Init_IgnoreAndReturn(cmock_retval) HAL_TIM_IC_Init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_IC_Init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_IC_Init_StopIgnore() HAL_TIM_IC_Init_CMockStopIgnore()
void HAL_TIM_IC_Init_CMockStopIgnore(void);
#define HAL_TIM_IC_Init_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_IC_Init requires _ExpectAndReturn");
#define HAL_TIM_IC_Init_ExpectAndReturn(htim, cmock_retval) HAL_TIM_IC_Init_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_IC_Init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_IC_Init_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_IC_Init_AddCallback(CMOCK_HAL_TIM_IC_Init_CALLBACK Callback);
void HAL_TIM_IC_Init_Stub(CMOCK_HAL_TIM_IC_Init_CALLBACK Callback);
#define HAL_TIM_IC_Init_StubWithCallback HAL_TIM_IC_Init_Stub
#define HAL_TIM_IC_DeInit_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_IC_DeInit requires _IgnoreAndReturn");
#define HAL_TIM_IC_DeInit_IgnoreAndReturn(cmock_retval) HAL_TIM_IC_DeInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_IC_DeInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_IC_DeInit_StopIgnore() HAL_TIM_IC_DeInit_CMockStopIgnore()
void HAL_TIM_IC_DeInit_CMockStopIgnore(void);
#define HAL_TIM_IC_DeInit_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_IC_DeInit requires _ExpectAndReturn");
#define HAL_TIM_IC_DeInit_ExpectAndReturn(htim, cmock_retval) HAL_TIM_IC_DeInit_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_IC_DeInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_IC_DeInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_IC_DeInit_AddCallback(CMOCK_HAL_TIM_IC_DeInit_CALLBACK Callback);
void HAL_TIM_IC_DeInit_Stub(CMOCK_HAL_TIM_IC_DeInit_CALLBACK Callback);
#define HAL_TIM_IC_DeInit_StubWithCallback HAL_TIM_IC_DeInit_Stub
#define HAL_TIM_IC_MspInit_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_IC_MspInit requires _Ignore (not AndReturn)");
#define HAL_TIM_IC_MspInit_Ignore() HAL_TIM_IC_MspInit_CMockIgnore()
void HAL_TIM_IC_MspInit_CMockIgnore(void);
#define HAL_TIM_IC_MspInit_StopIgnore() HAL_TIM_IC_MspInit_CMockStopIgnore()
void HAL_TIM_IC_MspInit_CMockStopIgnore(void);
#define HAL_TIM_IC_MspInit_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_IC_MspInit requires _Expect (not AndReturn)");
#define HAL_TIM_IC_MspInit_Expect(htim) HAL_TIM_IC_MspInit_CMockExpect(__LINE__, htim)
void HAL_TIM_IC_MspInit_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_IC_MspInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_IC_MspInit_AddCallback(CMOCK_HAL_TIM_IC_MspInit_CALLBACK Callback);
void HAL_TIM_IC_MspInit_Stub(CMOCK_HAL_TIM_IC_MspInit_CALLBACK Callback);
#define HAL_TIM_IC_MspInit_StubWithCallback HAL_TIM_IC_MspInit_Stub
#define HAL_TIM_IC_MspDeInit_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_IC_MspDeInit requires _Ignore (not AndReturn)");
#define HAL_TIM_IC_MspDeInit_Ignore() HAL_TIM_IC_MspDeInit_CMockIgnore()
void HAL_TIM_IC_MspDeInit_CMockIgnore(void);
#define HAL_TIM_IC_MspDeInit_StopIgnore() HAL_TIM_IC_MspDeInit_CMockStopIgnore()
void HAL_TIM_IC_MspDeInit_CMockStopIgnore(void);
#define HAL_TIM_IC_MspDeInit_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_IC_MspDeInit requires _Expect (not AndReturn)");
#define HAL_TIM_IC_MspDeInit_Expect(htim) HAL_TIM_IC_MspDeInit_CMockExpect(__LINE__, htim)
void HAL_TIM_IC_MspDeInit_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_IC_MspDeInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_IC_MspDeInit_AddCallback(CMOCK_HAL_TIM_IC_MspDeInit_CALLBACK Callback);
void HAL_TIM_IC_MspDeInit_Stub(CMOCK_HAL_TIM_IC_MspDeInit_CALLBACK Callback);
#define HAL_TIM_IC_MspDeInit_StubWithCallback HAL_TIM_IC_MspDeInit_Stub
#define HAL_TIM_IC_Start_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_IC_Start requires _IgnoreAndReturn");
#define HAL_TIM_IC_Start_IgnoreAndReturn(cmock_retval) HAL_TIM_IC_Start_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_IC_Start_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_IC_Start_StopIgnore() HAL_TIM_IC_Start_CMockStopIgnore()
void HAL_TIM_IC_Start_CMockStopIgnore(void);
#define HAL_TIM_IC_Start_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_IC_Start requires _ExpectAndReturn");
#define HAL_TIM_IC_Start_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_IC_Start_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_IC_Start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_IC_Start_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_IC_Start_AddCallback(CMOCK_HAL_TIM_IC_Start_CALLBACK Callback);
void HAL_TIM_IC_Start_Stub(CMOCK_HAL_TIM_IC_Start_CALLBACK Callback);
#define HAL_TIM_IC_Start_StubWithCallback HAL_TIM_IC_Start_Stub
#define HAL_TIM_IC_Stop_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_IC_Stop requires _IgnoreAndReturn");
#define HAL_TIM_IC_Stop_IgnoreAndReturn(cmock_retval) HAL_TIM_IC_Stop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_IC_Stop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_IC_Stop_StopIgnore() HAL_TIM_IC_Stop_CMockStopIgnore()
void HAL_TIM_IC_Stop_CMockStopIgnore(void);
#define HAL_TIM_IC_Stop_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_IC_Stop requires _ExpectAndReturn");
#define HAL_TIM_IC_Stop_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_IC_Stop_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_IC_Stop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_IC_Stop_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_IC_Stop_AddCallback(CMOCK_HAL_TIM_IC_Stop_CALLBACK Callback);
void HAL_TIM_IC_Stop_Stub(CMOCK_HAL_TIM_IC_Stop_CALLBACK Callback);
#define HAL_TIM_IC_Stop_StubWithCallback HAL_TIM_IC_Stop_Stub
#define HAL_TIM_IC_Start_IT_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_IC_Start_IT requires _IgnoreAndReturn");
#define HAL_TIM_IC_Start_IT_IgnoreAndReturn(cmock_retval) HAL_TIM_IC_Start_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_IC_Start_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_IC_Start_IT_StopIgnore() HAL_TIM_IC_Start_IT_CMockStopIgnore()
void HAL_TIM_IC_Start_IT_CMockStopIgnore(void);
#define HAL_TIM_IC_Start_IT_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_IC_Start_IT requires _ExpectAndReturn");
#define HAL_TIM_IC_Start_IT_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_IC_Start_IT_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_IC_Start_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_IC_Start_IT_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_IC_Start_IT_AddCallback(CMOCK_HAL_TIM_IC_Start_IT_CALLBACK Callback);
void HAL_TIM_IC_Start_IT_Stub(CMOCK_HAL_TIM_IC_Start_IT_CALLBACK Callback);
#define HAL_TIM_IC_Start_IT_StubWithCallback HAL_TIM_IC_Start_IT_Stub
#define HAL_TIM_IC_Stop_IT_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_IC_Stop_IT requires _IgnoreAndReturn");
#define HAL_TIM_IC_Stop_IT_IgnoreAndReturn(cmock_retval) HAL_TIM_IC_Stop_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_IC_Stop_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_IC_Stop_IT_StopIgnore() HAL_TIM_IC_Stop_IT_CMockStopIgnore()
void HAL_TIM_IC_Stop_IT_CMockStopIgnore(void);
#define HAL_TIM_IC_Stop_IT_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_IC_Stop_IT requires _ExpectAndReturn");
#define HAL_TIM_IC_Stop_IT_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_IC_Stop_IT_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_IC_Stop_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_IC_Stop_IT_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_IC_Stop_IT_AddCallback(CMOCK_HAL_TIM_IC_Stop_IT_CALLBACK Callback);
void HAL_TIM_IC_Stop_IT_Stub(CMOCK_HAL_TIM_IC_Stop_IT_CALLBACK Callback);
#define HAL_TIM_IC_Stop_IT_StubWithCallback HAL_TIM_IC_Stop_IT_Stub
#define HAL_TIM_IC_Start_DMA_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_IC_Start_DMA requires _IgnoreAndReturn");
#define HAL_TIM_IC_Start_DMA_IgnoreAndReturn(cmock_retval) HAL_TIM_IC_Start_DMA_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_IC_Start_DMA_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_IC_Start_DMA_StopIgnore() HAL_TIM_IC_Start_DMA_CMockStopIgnore()
void HAL_TIM_IC_Start_DMA_CMockStopIgnore(void);
#define HAL_TIM_IC_Start_DMA_Expect(htim, Channel, pData, Length) TEST_FAIL_MESSAGE("HAL_TIM_IC_Start_DMA requires _ExpectAndReturn");
#define HAL_TIM_IC_Start_DMA_ExpectAndReturn(htim, Channel, pData, Length, cmock_retval) HAL_TIM_IC_Start_DMA_CMockExpectAndReturn(__LINE__, htim, Channel, pData, Length, cmock_retval)
void HAL_TIM_IC_Start_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, uint32_t* pData, uint16_t Length, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_IC_Start_DMA_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, uint32_t* pData, uint16_t Length, int cmock_num_calls);
void HAL_TIM_IC_Start_DMA_AddCallback(CMOCK_HAL_TIM_IC_Start_DMA_CALLBACK Callback);
void HAL_TIM_IC_Start_DMA_Stub(CMOCK_HAL_TIM_IC_Start_DMA_CALLBACK Callback);
#define HAL_TIM_IC_Start_DMA_StubWithCallback HAL_TIM_IC_Start_DMA_Stub
#define HAL_TIM_IC_Stop_DMA_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_IC_Stop_DMA requires _IgnoreAndReturn");
#define HAL_TIM_IC_Stop_DMA_IgnoreAndReturn(cmock_retval) HAL_TIM_IC_Stop_DMA_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_IC_Stop_DMA_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_IC_Stop_DMA_StopIgnore() HAL_TIM_IC_Stop_DMA_CMockStopIgnore()
void HAL_TIM_IC_Stop_DMA_CMockStopIgnore(void);
#define HAL_TIM_IC_Stop_DMA_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_IC_Stop_DMA requires _ExpectAndReturn");
#define HAL_TIM_IC_Stop_DMA_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_IC_Stop_DMA_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_IC_Stop_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_IC_Stop_DMA_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_IC_Stop_DMA_AddCallback(CMOCK_HAL_TIM_IC_Stop_DMA_CALLBACK Callback);
void HAL_TIM_IC_Stop_DMA_Stub(CMOCK_HAL_TIM_IC_Stop_DMA_CALLBACK Callback);
#define HAL_TIM_IC_Stop_DMA_StubWithCallback HAL_TIM_IC_Stop_DMA_Stub
#define HAL_TIM_OnePulse_Init_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_Init requires _IgnoreAndReturn");
#define HAL_TIM_OnePulse_Init_IgnoreAndReturn(cmock_retval) HAL_TIM_OnePulse_Init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OnePulse_Init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OnePulse_Init_StopIgnore() HAL_TIM_OnePulse_Init_CMockStopIgnore()
void HAL_TIM_OnePulse_Init_CMockStopIgnore(void);
#define HAL_TIM_OnePulse_Init_Expect(htim, OnePulseMode) TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_Init requires _ExpectAndReturn");
#define HAL_TIM_OnePulse_Init_ExpectAndReturn(htim, OnePulseMode, cmock_retval) HAL_TIM_OnePulse_Init_CMockExpectAndReturn(__LINE__, htim, OnePulseMode, cmock_retval)
void HAL_TIM_OnePulse_Init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t OnePulseMode, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OnePulse_Init_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t OnePulseMode, int cmock_num_calls);
void HAL_TIM_OnePulse_Init_AddCallback(CMOCK_HAL_TIM_OnePulse_Init_CALLBACK Callback);
void HAL_TIM_OnePulse_Init_Stub(CMOCK_HAL_TIM_OnePulse_Init_CALLBACK Callback);
#define HAL_TIM_OnePulse_Init_StubWithCallback HAL_TIM_OnePulse_Init_Stub
#define HAL_TIM_OnePulse_DeInit_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_DeInit requires _IgnoreAndReturn");
#define HAL_TIM_OnePulse_DeInit_IgnoreAndReturn(cmock_retval) HAL_TIM_OnePulse_DeInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OnePulse_DeInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OnePulse_DeInit_StopIgnore() HAL_TIM_OnePulse_DeInit_CMockStopIgnore()
void HAL_TIM_OnePulse_DeInit_CMockStopIgnore(void);
#define HAL_TIM_OnePulse_DeInit_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_DeInit requires _ExpectAndReturn");
#define HAL_TIM_OnePulse_DeInit_ExpectAndReturn(htim, cmock_retval) HAL_TIM_OnePulse_DeInit_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_OnePulse_DeInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OnePulse_DeInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_OnePulse_DeInit_AddCallback(CMOCK_HAL_TIM_OnePulse_DeInit_CALLBACK Callback);
void HAL_TIM_OnePulse_DeInit_Stub(CMOCK_HAL_TIM_OnePulse_DeInit_CALLBACK Callback);
#define HAL_TIM_OnePulse_DeInit_StubWithCallback HAL_TIM_OnePulse_DeInit_Stub
#define HAL_TIM_OnePulse_MspInit_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_MspInit requires _Ignore (not AndReturn)");
#define HAL_TIM_OnePulse_MspInit_Ignore() HAL_TIM_OnePulse_MspInit_CMockIgnore()
void HAL_TIM_OnePulse_MspInit_CMockIgnore(void);
#define HAL_TIM_OnePulse_MspInit_StopIgnore() HAL_TIM_OnePulse_MspInit_CMockStopIgnore()
void HAL_TIM_OnePulse_MspInit_CMockStopIgnore(void);
#define HAL_TIM_OnePulse_MspInit_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_MspInit requires _Expect (not AndReturn)");
#define HAL_TIM_OnePulse_MspInit_Expect(htim) HAL_TIM_OnePulse_MspInit_CMockExpect(__LINE__, htim)
void HAL_TIM_OnePulse_MspInit_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_OnePulse_MspInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_OnePulse_MspInit_AddCallback(CMOCK_HAL_TIM_OnePulse_MspInit_CALLBACK Callback);
void HAL_TIM_OnePulse_MspInit_Stub(CMOCK_HAL_TIM_OnePulse_MspInit_CALLBACK Callback);
#define HAL_TIM_OnePulse_MspInit_StubWithCallback HAL_TIM_OnePulse_MspInit_Stub
#define HAL_TIM_OnePulse_MspDeInit_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_MspDeInit requires _Ignore (not AndReturn)");
#define HAL_TIM_OnePulse_MspDeInit_Ignore() HAL_TIM_OnePulse_MspDeInit_CMockIgnore()
void HAL_TIM_OnePulse_MspDeInit_CMockIgnore(void);
#define HAL_TIM_OnePulse_MspDeInit_StopIgnore() HAL_TIM_OnePulse_MspDeInit_CMockStopIgnore()
void HAL_TIM_OnePulse_MspDeInit_CMockStopIgnore(void);
#define HAL_TIM_OnePulse_MspDeInit_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_MspDeInit requires _Expect (not AndReturn)");
#define HAL_TIM_OnePulse_MspDeInit_Expect(htim) HAL_TIM_OnePulse_MspDeInit_CMockExpect(__LINE__, htim)
void HAL_TIM_OnePulse_MspDeInit_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_OnePulse_MspDeInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_OnePulse_MspDeInit_AddCallback(CMOCK_HAL_TIM_OnePulse_MspDeInit_CALLBACK Callback);
void HAL_TIM_OnePulse_MspDeInit_Stub(CMOCK_HAL_TIM_OnePulse_MspDeInit_CALLBACK Callback);
#define HAL_TIM_OnePulse_MspDeInit_StubWithCallback HAL_TIM_OnePulse_MspDeInit_Stub
#define HAL_TIM_OnePulse_Start_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_Start requires _IgnoreAndReturn");
#define HAL_TIM_OnePulse_Start_IgnoreAndReturn(cmock_retval) HAL_TIM_OnePulse_Start_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OnePulse_Start_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OnePulse_Start_StopIgnore() HAL_TIM_OnePulse_Start_CMockStopIgnore()
void HAL_TIM_OnePulse_Start_CMockStopIgnore(void);
#define HAL_TIM_OnePulse_Start_Expect(htim, OutputChannel) TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_Start requires _ExpectAndReturn");
#define HAL_TIM_OnePulse_Start_ExpectAndReturn(htim, OutputChannel, cmock_retval) HAL_TIM_OnePulse_Start_CMockExpectAndReturn(__LINE__, htim, OutputChannel, cmock_retval)
void HAL_TIM_OnePulse_Start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t OutputChannel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OnePulse_Start_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t OutputChannel, int cmock_num_calls);
void HAL_TIM_OnePulse_Start_AddCallback(CMOCK_HAL_TIM_OnePulse_Start_CALLBACK Callback);
void HAL_TIM_OnePulse_Start_Stub(CMOCK_HAL_TIM_OnePulse_Start_CALLBACK Callback);
#define HAL_TIM_OnePulse_Start_StubWithCallback HAL_TIM_OnePulse_Start_Stub
#define HAL_TIM_OnePulse_Stop_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_Stop requires _IgnoreAndReturn");
#define HAL_TIM_OnePulse_Stop_IgnoreAndReturn(cmock_retval) HAL_TIM_OnePulse_Stop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OnePulse_Stop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OnePulse_Stop_StopIgnore() HAL_TIM_OnePulse_Stop_CMockStopIgnore()
void HAL_TIM_OnePulse_Stop_CMockStopIgnore(void);
#define HAL_TIM_OnePulse_Stop_Expect(htim, OutputChannel) TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_Stop requires _ExpectAndReturn");
#define HAL_TIM_OnePulse_Stop_ExpectAndReturn(htim, OutputChannel, cmock_retval) HAL_TIM_OnePulse_Stop_CMockExpectAndReturn(__LINE__, htim, OutputChannel, cmock_retval)
void HAL_TIM_OnePulse_Stop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t OutputChannel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OnePulse_Stop_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t OutputChannel, int cmock_num_calls);
void HAL_TIM_OnePulse_Stop_AddCallback(CMOCK_HAL_TIM_OnePulse_Stop_CALLBACK Callback);
void HAL_TIM_OnePulse_Stop_Stub(CMOCK_HAL_TIM_OnePulse_Stop_CALLBACK Callback);
#define HAL_TIM_OnePulse_Stop_StubWithCallback HAL_TIM_OnePulse_Stop_Stub
#define HAL_TIM_OnePulse_Start_IT_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_Start_IT requires _IgnoreAndReturn");
#define HAL_TIM_OnePulse_Start_IT_IgnoreAndReturn(cmock_retval) HAL_TIM_OnePulse_Start_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OnePulse_Start_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OnePulse_Start_IT_StopIgnore() HAL_TIM_OnePulse_Start_IT_CMockStopIgnore()
void HAL_TIM_OnePulse_Start_IT_CMockStopIgnore(void);
#define HAL_TIM_OnePulse_Start_IT_Expect(htim, OutputChannel) TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_Start_IT requires _ExpectAndReturn");
#define HAL_TIM_OnePulse_Start_IT_ExpectAndReturn(htim, OutputChannel, cmock_retval) HAL_TIM_OnePulse_Start_IT_CMockExpectAndReturn(__LINE__, htim, OutputChannel, cmock_retval)
void HAL_TIM_OnePulse_Start_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t OutputChannel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OnePulse_Start_IT_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t OutputChannel, int cmock_num_calls);
void HAL_TIM_OnePulse_Start_IT_AddCallback(CMOCK_HAL_TIM_OnePulse_Start_IT_CALLBACK Callback);
void HAL_TIM_OnePulse_Start_IT_Stub(CMOCK_HAL_TIM_OnePulse_Start_IT_CALLBACK Callback);
#define HAL_TIM_OnePulse_Start_IT_StubWithCallback HAL_TIM_OnePulse_Start_IT_Stub
#define HAL_TIM_OnePulse_Stop_IT_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_Stop_IT requires _IgnoreAndReturn");
#define HAL_TIM_OnePulse_Stop_IT_IgnoreAndReturn(cmock_retval) HAL_TIM_OnePulse_Stop_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OnePulse_Stop_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OnePulse_Stop_IT_StopIgnore() HAL_TIM_OnePulse_Stop_IT_CMockStopIgnore()
void HAL_TIM_OnePulse_Stop_IT_CMockStopIgnore(void);
#define HAL_TIM_OnePulse_Stop_IT_Expect(htim, OutputChannel) TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_Stop_IT requires _ExpectAndReturn");
#define HAL_TIM_OnePulse_Stop_IT_ExpectAndReturn(htim, OutputChannel, cmock_retval) HAL_TIM_OnePulse_Stop_IT_CMockExpectAndReturn(__LINE__, htim, OutputChannel, cmock_retval)
void HAL_TIM_OnePulse_Stop_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t OutputChannel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OnePulse_Stop_IT_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t OutputChannel, int cmock_num_calls);
void HAL_TIM_OnePulse_Stop_IT_AddCallback(CMOCK_HAL_TIM_OnePulse_Stop_IT_CALLBACK Callback);
void HAL_TIM_OnePulse_Stop_IT_Stub(CMOCK_HAL_TIM_OnePulse_Stop_IT_CALLBACK Callback);
#define HAL_TIM_OnePulse_Stop_IT_StubWithCallback HAL_TIM_OnePulse_Stop_IT_Stub
#define HAL_TIM_Encoder_Init_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Encoder_Init requires _IgnoreAndReturn");
#define HAL_TIM_Encoder_Init_IgnoreAndReturn(cmock_retval) HAL_TIM_Encoder_Init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Encoder_Init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Encoder_Init_StopIgnore() HAL_TIM_Encoder_Init_CMockStopIgnore()
void HAL_TIM_Encoder_Init_CMockStopIgnore(void);
#define HAL_TIM_Encoder_Init_Expect(htim, sConfig) TEST_FAIL_MESSAGE("HAL_TIM_Encoder_Init requires _ExpectAndReturn");
#define HAL_TIM_Encoder_Init_ExpectAndReturn(htim, sConfig, cmock_retval) HAL_TIM_Encoder_Init_CMockExpectAndReturn(__LINE__, htim, sConfig, cmock_retval)
void HAL_TIM_Encoder_Init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, const TIM_Encoder_InitTypeDef* sConfig, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Encoder_Init_CALLBACK)(TIM_HandleTypeDef* htim, const TIM_Encoder_InitTypeDef* sConfig, int cmock_num_calls);
void HAL_TIM_Encoder_Init_AddCallback(CMOCK_HAL_TIM_Encoder_Init_CALLBACK Callback);
void HAL_TIM_Encoder_Init_Stub(CMOCK_HAL_TIM_Encoder_Init_CALLBACK Callback);
#define HAL_TIM_Encoder_Init_StubWithCallback HAL_TIM_Encoder_Init_Stub
#define HAL_TIM_Encoder_DeInit_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Encoder_DeInit requires _IgnoreAndReturn");
#define HAL_TIM_Encoder_DeInit_IgnoreAndReturn(cmock_retval) HAL_TIM_Encoder_DeInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Encoder_DeInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Encoder_DeInit_StopIgnore() HAL_TIM_Encoder_DeInit_CMockStopIgnore()
void HAL_TIM_Encoder_DeInit_CMockStopIgnore(void);
#define HAL_TIM_Encoder_DeInit_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_Encoder_DeInit requires _ExpectAndReturn");
#define HAL_TIM_Encoder_DeInit_ExpectAndReturn(htim, cmock_retval) HAL_TIM_Encoder_DeInit_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_Encoder_DeInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Encoder_DeInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_Encoder_DeInit_AddCallback(CMOCK_HAL_TIM_Encoder_DeInit_CALLBACK Callback);
void HAL_TIM_Encoder_DeInit_Stub(CMOCK_HAL_TIM_Encoder_DeInit_CALLBACK Callback);
#define HAL_TIM_Encoder_DeInit_StubWithCallback HAL_TIM_Encoder_DeInit_Stub
#define HAL_TIM_Encoder_MspInit_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_Encoder_MspInit requires _Ignore (not AndReturn)");
#define HAL_TIM_Encoder_MspInit_Ignore() HAL_TIM_Encoder_MspInit_CMockIgnore()
void HAL_TIM_Encoder_MspInit_CMockIgnore(void);
#define HAL_TIM_Encoder_MspInit_StopIgnore() HAL_TIM_Encoder_MspInit_CMockStopIgnore()
void HAL_TIM_Encoder_MspInit_CMockStopIgnore(void);
#define HAL_TIM_Encoder_MspInit_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_Encoder_MspInit requires _Expect (not AndReturn)");
#define HAL_TIM_Encoder_MspInit_Expect(htim) HAL_TIM_Encoder_MspInit_CMockExpect(__LINE__, htim)
void HAL_TIM_Encoder_MspInit_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_Encoder_MspInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_Encoder_MspInit_AddCallback(CMOCK_HAL_TIM_Encoder_MspInit_CALLBACK Callback);
void HAL_TIM_Encoder_MspInit_Stub(CMOCK_HAL_TIM_Encoder_MspInit_CALLBACK Callback);
#define HAL_TIM_Encoder_MspInit_StubWithCallback HAL_TIM_Encoder_MspInit_Stub
#define HAL_TIM_Encoder_MspDeInit_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_Encoder_MspDeInit requires _Ignore (not AndReturn)");
#define HAL_TIM_Encoder_MspDeInit_Ignore() HAL_TIM_Encoder_MspDeInit_CMockIgnore()
void HAL_TIM_Encoder_MspDeInit_CMockIgnore(void);
#define HAL_TIM_Encoder_MspDeInit_StopIgnore() HAL_TIM_Encoder_MspDeInit_CMockStopIgnore()
void HAL_TIM_Encoder_MspDeInit_CMockStopIgnore(void);
#define HAL_TIM_Encoder_MspDeInit_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_Encoder_MspDeInit requires _Expect (not AndReturn)");
#define HAL_TIM_Encoder_MspDeInit_Expect(htim) HAL_TIM_Encoder_MspDeInit_CMockExpect(__LINE__, htim)
void HAL_TIM_Encoder_MspDeInit_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_Encoder_MspDeInit_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_Encoder_MspDeInit_AddCallback(CMOCK_HAL_TIM_Encoder_MspDeInit_CALLBACK Callback);
void HAL_TIM_Encoder_MspDeInit_Stub(CMOCK_HAL_TIM_Encoder_MspDeInit_CALLBACK Callback);
#define HAL_TIM_Encoder_MspDeInit_StubWithCallback HAL_TIM_Encoder_MspDeInit_Stub
#define HAL_TIM_Encoder_Start_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Encoder_Start requires _IgnoreAndReturn");
#define HAL_TIM_Encoder_Start_IgnoreAndReturn(cmock_retval) HAL_TIM_Encoder_Start_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Encoder_Start_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Encoder_Start_StopIgnore() HAL_TIM_Encoder_Start_CMockStopIgnore()
void HAL_TIM_Encoder_Start_CMockStopIgnore(void);
#define HAL_TIM_Encoder_Start_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_Encoder_Start requires _ExpectAndReturn");
#define HAL_TIM_Encoder_Start_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_Encoder_Start_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_Encoder_Start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Encoder_Start_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_Encoder_Start_AddCallback(CMOCK_HAL_TIM_Encoder_Start_CALLBACK Callback);
void HAL_TIM_Encoder_Start_Stub(CMOCK_HAL_TIM_Encoder_Start_CALLBACK Callback);
#define HAL_TIM_Encoder_Start_StubWithCallback HAL_TIM_Encoder_Start_Stub
#define HAL_TIM_Encoder_Stop_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Encoder_Stop requires _IgnoreAndReturn");
#define HAL_TIM_Encoder_Stop_IgnoreAndReturn(cmock_retval) HAL_TIM_Encoder_Stop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Encoder_Stop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Encoder_Stop_StopIgnore() HAL_TIM_Encoder_Stop_CMockStopIgnore()
void HAL_TIM_Encoder_Stop_CMockStopIgnore(void);
#define HAL_TIM_Encoder_Stop_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_Encoder_Stop requires _ExpectAndReturn");
#define HAL_TIM_Encoder_Stop_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_Encoder_Stop_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_Encoder_Stop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Encoder_Stop_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_Encoder_Stop_AddCallback(CMOCK_HAL_TIM_Encoder_Stop_CALLBACK Callback);
void HAL_TIM_Encoder_Stop_Stub(CMOCK_HAL_TIM_Encoder_Stop_CALLBACK Callback);
#define HAL_TIM_Encoder_Stop_StubWithCallback HAL_TIM_Encoder_Stop_Stub
#define HAL_TIM_Encoder_Start_IT_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Encoder_Start_IT requires _IgnoreAndReturn");
#define HAL_TIM_Encoder_Start_IT_IgnoreAndReturn(cmock_retval) HAL_TIM_Encoder_Start_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Encoder_Start_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Encoder_Start_IT_StopIgnore() HAL_TIM_Encoder_Start_IT_CMockStopIgnore()
void HAL_TIM_Encoder_Start_IT_CMockStopIgnore(void);
#define HAL_TIM_Encoder_Start_IT_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_Encoder_Start_IT requires _ExpectAndReturn");
#define HAL_TIM_Encoder_Start_IT_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_Encoder_Start_IT_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_Encoder_Start_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Encoder_Start_IT_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_Encoder_Start_IT_AddCallback(CMOCK_HAL_TIM_Encoder_Start_IT_CALLBACK Callback);
void HAL_TIM_Encoder_Start_IT_Stub(CMOCK_HAL_TIM_Encoder_Start_IT_CALLBACK Callback);
#define HAL_TIM_Encoder_Start_IT_StubWithCallback HAL_TIM_Encoder_Start_IT_Stub
#define HAL_TIM_Encoder_Stop_IT_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Encoder_Stop_IT requires _IgnoreAndReturn");
#define HAL_TIM_Encoder_Stop_IT_IgnoreAndReturn(cmock_retval) HAL_TIM_Encoder_Stop_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Encoder_Stop_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Encoder_Stop_IT_StopIgnore() HAL_TIM_Encoder_Stop_IT_CMockStopIgnore()
void HAL_TIM_Encoder_Stop_IT_CMockStopIgnore(void);
#define HAL_TIM_Encoder_Stop_IT_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_Encoder_Stop_IT requires _ExpectAndReturn");
#define HAL_TIM_Encoder_Stop_IT_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_Encoder_Stop_IT_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_Encoder_Stop_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Encoder_Stop_IT_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_Encoder_Stop_IT_AddCallback(CMOCK_HAL_TIM_Encoder_Stop_IT_CALLBACK Callback);
void HAL_TIM_Encoder_Stop_IT_Stub(CMOCK_HAL_TIM_Encoder_Stop_IT_CALLBACK Callback);
#define HAL_TIM_Encoder_Stop_IT_StubWithCallback HAL_TIM_Encoder_Stop_IT_Stub
#define HAL_TIM_Encoder_Start_DMA_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Encoder_Start_DMA requires _IgnoreAndReturn");
#define HAL_TIM_Encoder_Start_DMA_IgnoreAndReturn(cmock_retval) HAL_TIM_Encoder_Start_DMA_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Encoder_Start_DMA_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Encoder_Start_DMA_StopIgnore() HAL_TIM_Encoder_Start_DMA_CMockStopIgnore()
void HAL_TIM_Encoder_Start_DMA_CMockStopIgnore(void);
#define HAL_TIM_Encoder_Start_DMA_Expect(htim, Channel, pData1, pData2, Length) TEST_FAIL_MESSAGE("HAL_TIM_Encoder_Start_DMA requires _ExpectAndReturn");
#define HAL_TIM_Encoder_Start_DMA_ExpectAndReturn(htim, Channel, pData1, pData2, Length, cmock_retval) HAL_TIM_Encoder_Start_DMA_CMockExpectAndReturn(__LINE__, htim, Channel, pData1, pData2, Length, cmock_retval)
void HAL_TIM_Encoder_Start_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, uint32_t* pData1, uint32_t* pData2, uint16_t Length, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Encoder_Start_DMA_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, uint32_t* pData1, uint32_t* pData2, uint16_t Length, int cmock_num_calls);
void HAL_TIM_Encoder_Start_DMA_AddCallback(CMOCK_HAL_TIM_Encoder_Start_DMA_CALLBACK Callback);
void HAL_TIM_Encoder_Start_DMA_Stub(CMOCK_HAL_TIM_Encoder_Start_DMA_CALLBACK Callback);
#define HAL_TIM_Encoder_Start_DMA_StubWithCallback HAL_TIM_Encoder_Start_DMA_Stub
#define HAL_TIM_Encoder_Stop_DMA_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Encoder_Stop_DMA requires _IgnoreAndReturn");
#define HAL_TIM_Encoder_Stop_DMA_IgnoreAndReturn(cmock_retval) HAL_TIM_Encoder_Stop_DMA_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Encoder_Stop_DMA_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_Encoder_Stop_DMA_StopIgnore() HAL_TIM_Encoder_Stop_DMA_CMockStopIgnore()
void HAL_TIM_Encoder_Stop_DMA_CMockStopIgnore(void);
#define HAL_TIM_Encoder_Stop_DMA_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_Encoder_Stop_DMA requires _ExpectAndReturn");
#define HAL_TIM_Encoder_Stop_DMA_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_Encoder_Stop_DMA_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_Encoder_Stop_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_Encoder_Stop_DMA_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_Encoder_Stop_DMA_AddCallback(CMOCK_HAL_TIM_Encoder_Stop_DMA_CALLBACK Callback);
void HAL_TIM_Encoder_Stop_DMA_Stub(CMOCK_HAL_TIM_Encoder_Stop_DMA_CALLBACK Callback);
#define HAL_TIM_Encoder_Stop_DMA_StubWithCallback HAL_TIM_Encoder_Stop_DMA_Stub
#define HAL_TIM_IRQHandler_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_IRQHandler requires _Ignore (not AndReturn)");
#define HAL_TIM_IRQHandler_Ignore() HAL_TIM_IRQHandler_CMockIgnore()
void HAL_TIM_IRQHandler_CMockIgnore(void);
#define HAL_TIM_IRQHandler_StopIgnore() HAL_TIM_IRQHandler_CMockStopIgnore()
void HAL_TIM_IRQHandler_CMockStopIgnore(void);
#define HAL_TIM_IRQHandler_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_IRQHandler requires _Expect (not AndReturn)");
#define HAL_TIM_IRQHandler_Expect(htim) HAL_TIM_IRQHandler_CMockExpect(__LINE__, htim)
void HAL_TIM_IRQHandler_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_IRQHandler_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_IRQHandler_AddCallback(CMOCK_HAL_TIM_IRQHandler_CALLBACK Callback);
void HAL_TIM_IRQHandler_Stub(CMOCK_HAL_TIM_IRQHandler_CALLBACK Callback);
#define HAL_TIM_IRQHandler_StubWithCallback HAL_TIM_IRQHandler_Stub
#define HAL_TIM_OC_ConfigChannel_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OC_ConfigChannel requires _IgnoreAndReturn");
#define HAL_TIM_OC_ConfigChannel_IgnoreAndReturn(cmock_retval) HAL_TIM_OC_ConfigChannel_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OC_ConfigChannel_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OC_ConfigChannel_StopIgnore() HAL_TIM_OC_ConfigChannel_CMockStopIgnore()
void HAL_TIM_OC_ConfigChannel_CMockStopIgnore(void);
#define HAL_TIM_OC_ConfigChannel_Expect(htim, sConfig, Channel) TEST_FAIL_MESSAGE("HAL_TIM_OC_ConfigChannel requires _ExpectAndReturn");
#define HAL_TIM_OC_ConfigChannel_ExpectAndReturn(htim, sConfig, Channel, cmock_retval) HAL_TIM_OC_ConfigChannel_CMockExpectAndReturn(__LINE__, htim, sConfig, Channel, cmock_retval)
void HAL_TIM_OC_ConfigChannel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, const TIM_OC_InitTypeDef* sConfig, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OC_ConfigChannel_CALLBACK)(TIM_HandleTypeDef* htim, const TIM_OC_InitTypeDef* sConfig, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_OC_ConfigChannel_AddCallback(CMOCK_HAL_TIM_OC_ConfigChannel_CALLBACK Callback);
void HAL_TIM_OC_ConfigChannel_Stub(CMOCK_HAL_TIM_OC_ConfigChannel_CALLBACK Callback);
#define HAL_TIM_OC_ConfigChannel_StubWithCallback HAL_TIM_OC_ConfigChannel_Stub
#define HAL_TIM_PWM_ConfigChannel_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_PWM_ConfigChannel requires _IgnoreAndReturn");
#define HAL_TIM_PWM_ConfigChannel_IgnoreAndReturn(cmock_retval) HAL_TIM_PWM_ConfigChannel_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_PWM_ConfigChannel_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_PWM_ConfigChannel_StopIgnore() HAL_TIM_PWM_ConfigChannel_CMockStopIgnore()
void HAL_TIM_PWM_ConfigChannel_CMockStopIgnore(void);
#define HAL_TIM_PWM_ConfigChannel_Expect(htim, sConfig, Channel) TEST_FAIL_MESSAGE("HAL_TIM_PWM_ConfigChannel requires _ExpectAndReturn");
#define HAL_TIM_PWM_ConfigChannel_ExpectAndReturn(htim, sConfig, Channel, cmock_retval) HAL_TIM_PWM_ConfigChannel_CMockExpectAndReturn(__LINE__, htim, sConfig, Channel, cmock_retval)
void HAL_TIM_PWM_ConfigChannel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, const TIM_OC_InitTypeDef* sConfig, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_PWM_ConfigChannel_CALLBACK)(TIM_HandleTypeDef* htim, const TIM_OC_InitTypeDef* sConfig, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_PWM_ConfigChannel_AddCallback(CMOCK_HAL_TIM_PWM_ConfigChannel_CALLBACK Callback);
void HAL_TIM_PWM_ConfigChannel_Stub(CMOCK_HAL_TIM_PWM_ConfigChannel_CALLBACK Callback);
#define HAL_TIM_PWM_ConfigChannel_StubWithCallback HAL_TIM_PWM_ConfigChannel_Stub
#define HAL_TIM_IC_ConfigChannel_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_IC_ConfigChannel requires _IgnoreAndReturn");
#define HAL_TIM_IC_ConfigChannel_IgnoreAndReturn(cmock_retval) HAL_TIM_IC_ConfigChannel_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_IC_ConfigChannel_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_IC_ConfigChannel_StopIgnore() HAL_TIM_IC_ConfigChannel_CMockStopIgnore()
void HAL_TIM_IC_ConfigChannel_CMockStopIgnore(void);
#define HAL_TIM_IC_ConfigChannel_Expect(htim, sConfig, Channel) TEST_FAIL_MESSAGE("HAL_TIM_IC_ConfigChannel requires _ExpectAndReturn");
#define HAL_TIM_IC_ConfigChannel_ExpectAndReturn(htim, sConfig, Channel, cmock_retval) HAL_TIM_IC_ConfigChannel_CMockExpectAndReturn(__LINE__, htim, sConfig, Channel, cmock_retval)
void HAL_TIM_IC_ConfigChannel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, const TIM_IC_InitTypeDef* sConfig, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_IC_ConfigChannel_CALLBACK)(TIM_HandleTypeDef* htim, const TIM_IC_InitTypeDef* sConfig, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_IC_ConfigChannel_AddCallback(CMOCK_HAL_TIM_IC_ConfigChannel_CALLBACK Callback);
void HAL_TIM_IC_ConfigChannel_Stub(CMOCK_HAL_TIM_IC_ConfigChannel_CALLBACK Callback);
#define HAL_TIM_IC_ConfigChannel_StubWithCallback HAL_TIM_IC_ConfigChannel_Stub
#define HAL_TIM_OnePulse_ConfigChannel_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_ConfigChannel requires _IgnoreAndReturn");
#define HAL_TIM_OnePulse_ConfigChannel_IgnoreAndReturn(cmock_retval) HAL_TIM_OnePulse_ConfigChannel_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OnePulse_ConfigChannel_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_OnePulse_ConfigChannel_StopIgnore() HAL_TIM_OnePulse_ConfigChannel_CMockStopIgnore()
void HAL_TIM_OnePulse_ConfigChannel_CMockStopIgnore(void);
#define HAL_TIM_OnePulse_ConfigChannel_Expect(htim, sConfig, OutputChannel, InputChannel) TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_ConfigChannel requires _ExpectAndReturn");
#define HAL_TIM_OnePulse_ConfigChannel_ExpectAndReturn(htim, sConfig, OutputChannel, InputChannel, cmock_retval) HAL_TIM_OnePulse_ConfigChannel_CMockExpectAndReturn(__LINE__, htim, sConfig, OutputChannel, InputChannel, cmock_retval)
void HAL_TIM_OnePulse_ConfigChannel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel, uint32_t InputChannel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_OnePulse_ConfigChannel_CALLBACK)(TIM_HandleTypeDef* htim, TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel, uint32_t InputChannel, int cmock_num_calls);
void HAL_TIM_OnePulse_ConfigChannel_AddCallback(CMOCK_HAL_TIM_OnePulse_ConfigChannel_CALLBACK Callback);
void HAL_TIM_OnePulse_ConfigChannel_Stub(CMOCK_HAL_TIM_OnePulse_ConfigChannel_CALLBACK Callback);
#define HAL_TIM_OnePulse_ConfigChannel_StubWithCallback HAL_TIM_OnePulse_ConfigChannel_Stub
#define HAL_TIM_ConfigOCrefClear_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_ConfigOCrefClear requires _IgnoreAndReturn");
#define HAL_TIM_ConfigOCrefClear_IgnoreAndReturn(cmock_retval) HAL_TIM_ConfigOCrefClear_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_ConfigOCrefClear_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_ConfigOCrefClear_StopIgnore() HAL_TIM_ConfigOCrefClear_CMockStopIgnore()
void HAL_TIM_ConfigOCrefClear_CMockStopIgnore(void);
#define HAL_TIM_ConfigOCrefClear_Expect(htim, sClearInputConfig, Channel) TEST_FAIL_MESSAGE("HAL_TIM_ConfigOCrefClear requires _ExpectAndReturn");
#define HAL_TIM_ConfigOCrefClear_ExpectAndReturn(htim, sClearInputConfig, Channel, cmock_retval) HAL_TIM_ConfigOCrefClear_CMockExpectAndReturn(__LINE__, htim, sClearInputConfig, Channel, cmock_retval)
void HAL_TIM_ConfigOCrefClear_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, const TIM_ClearInputConfigTypeDef* sClearInputConfig, uint32_t Channel, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_ConfigOCrefClear_CALLBACK)(TIM_HandleTypeDef* htim, const TIM_ClearInputConfigTypeDef* sClearInputConfig, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_ConfigOCrefClear_AddCallback(CMOCK_HAL_TIM_ConfigOCrefClear_CALLBACK Callback);
void HAL_TIM_ConfigOCrefClear_Stub(CMOCK_HAL_TIM_ConfigOCrefClear_CALLBACK Callback);
#define HAL_TIM_ConfigOCrefClear_StubWithCallback HAL_TIM_ConfigOCrefClear_Stub
#define HAL_TIM_ConfigClockSource_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_ConfigClockSource requires _IgnoreAndReturn");
#define HAL_TIM_ConfigClockSource_IgnoreAndReturn(cmock_retval) HAL_TIM_ConfigClockSource_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_ConfigClockSource_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_ConfigClockSource_StopIgnore() HAL_TIM_ConfigClockSource_CMockStopIgnore()
void HAL_TIM_ConfigClockSource_CMockStopIgnore(void);
#define HAL_TIM_ConfigClockSource_Expect(htim, sClockSourceConfig) TEST_FAIL_MESSAGE("HAL_TIM_ConfigClockSource requires _ExpectAndReturn");
#define HAL_TIM_ConfigClockSource_ExpectAndReturn(htim, sClockSourceConfig, cmock_retval) HAL_TIM_ConfigClockSource_CMockExpectAndReturn(__LINE__, htim, sClockSourceConfig, cmock_retval)
void HAL_TIM_ConfigClockSource_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, const TIM_ClockConfigTypeDef* sClockSourceConfig, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_ConfigClockSource_CALLBACK)(TIM_HandleTypeDef* htim, const TIM_ClockConfigTypeDef* sClockSourceConfig, int cmock_num_calls);
void HAL_TIM_ConfigClockSource_AddCallback(CMOCK_HAL_TIM_ConfigClockSource_CALLBACK Callback);
void HAL_TIM_ConfigClockSource_Stub(CMOCK_HAL_TIM_ConfigClockSource_CALLBACK Callback);
#define HAL_TIM_ConfigClockSource_StubWithCallback HAL_TIM_ConfigClockSource_Stub
#define HAL_TIM_ConfigTI1Input_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_ConfigTI1Input requires _IgnoreAndReturn");
#define HAL_TIM_ConfigTI1Input_IgnoreAndReturn(cmock_retval) HAL_TIM_ConfigTI1Input_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_ConfigTI1Input_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_ConfigTI1Input_StopIgnore() HAL_TIM_ConfigTI1Input_CMockStopIgnore()
void HAL_TIM_ConfigTI1Input_CMockStopIgnore(void);
#define HAL_TIM_ConfigTI1Input_Expect(htim, TI1_Selection) TEST_FAIL_MESSAGE("HAL_TIM_ConfigTI1Input requires _ExpectAndReturn");
#define HAL_TIM_ConfigTI1Input_ExpectAndReturn(htim, TI1_Selection, cmock_retval) HAL_TIM_ConfigTI1Input_CMockExpectAndReturn(__LINE__, htim, TI1_Selection, cmock_retval)
void HAL_TIM_ConfigTI1Input_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t TI1_Selection, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_ConfigTI1Input_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t TI1_Selection, int cmock_num_calls);
void HAL_TIM_ConfigTI1Input_AddCallback(CMOCK_HAL_TIM_ConfigTI1Input_CALLBACK Callback);
void HAL_TIM_ConfigTI1Input_Stub(CMOCK_HAL_TIM_ConfigTI1Input_CALLBACK Callback);
#define HAL_TIM_ConfigTI1Input_StubWithCallback HAL_TIM_ConfigTI1Input_Stub
#define HAL_TIM_SlaveConfigSynchro_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_SlaveConfigSynchro requires _IgnoreAndReturn");
#define HAL_TIM_SlaveConfigSynchro_IgnoreAndReturn(cmock_retval) HAL_TIM_SlaveConfigSynchro_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_SlaveConfigSynchro_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_SlaveConfigSynchro_StopIgnore() HAL_TIM_SlaveConfigSynchro_CMockStopIgnore()
void HAL_TIM_SlaveConfigSynchro_CMockStopIgnore(void);
#define HAL_TIM_SlaveConfigSynchro_Expect(htim, sSlaveConfig) TEST_FAIL_MESSAGE("HAL_TIM_SlaveConfigSynchro requires _ExpectAndReturn");
#define HAL_TIM_SlaveConfigSynchro_ExpectAndReturn(htim, sSlaveConfig, cmock_retval) HAL_TIM_SlaveConfigSynchro_CMockExpectAndReturn(__LINE__, htim, sSlaveConfig, cmock_retval)
void HAL_TIM_SlaveConfigSynchro_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, const TIM_SlaveConfigTypeDef* sSlaveConfig, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_SlaveConfigSynchro_CALLBACK)(TIM_HandleTypeDef* htim, const TIM_SlaveConfigTypeDef* sSlaveConfig, int cmock_num_calls);
void HAL_TIM_SlaveConfigSynchro_AddCallback(CMOCK_HAL_TIM_SlaveConfigSynchro_CALLBACK Callback);
void HAL_TIM_SlaveConfigSynchro_Stub(CMOCK_HAL_TIM_SlaveConfigSynchro_CALLBACK Callback);
#define HAL_TIM_SlaveConfigSynchro_StubWithCallback HAL_TIM_SlaveConfigSynchro_Stub
#define HAL_TIM_SlaveConfigSynchro_IT_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_SlaveConfigSynchro_IT requires _IgnoreAndReturn");
#define HAL_TIM_SlaveConfigSynchro_IT_IgnoreAndReturn(cmock_retval) HAL_TIM_SlaveConfigSynchro_IT_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_SlaveConfigSynchro_IT_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_SlaveConfigSynchro_IT_StopIgnore() HAL_TIM_SlaveConfigSynchro_IT_CMockStopIgnore()
void HAL_TIM_SlaveConfigSynchro_IT_CMockStopIgnore(void);
#define HAL_TIM_SlaveConfigSynchro_IT_Expect(htim, sSlaveConfig) TEST_FAIL_MESSAGE("HAL_TIM_SlaveConfigSynchro_IT requires _ExpectAndReturn");
#define HAL_TIM_SlaveConfigSynchro_IT_ExpectAndReturn(htim, sSlaveConfig, cmock_retval) HAL_TIM_SlaveConfigSynchro_IT_CMockExpectAndReturn(__LINE__, htim, sSlaveConfig, cmock_retval)
void HAL_TIM_SlaveConfigSynchro_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, const TIM_SlaveConfigTypeDef* sSlaveConfig, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_SlaveConfigSynchro_IT_CALLBACK)(TIM_HandleTypeDef* htim, const TIM_SlaveConfigTypeDef* sSlaveConfig, int cmock_num_calls);
void HAL_TIM_SlaveConfigSynchro_IT_AddCallback(CMOCK_HAL_TIM_SlaveConfigSynchro_IT_CALLBACK Callback);
void HAL_TIM_SlaveConfigSynchro_IT_Stub(CMOCK_HAL_TIM_SlaveConfigSynchro_IT_CALLBACK Callback);
#define HAL_TIM_SlaveConfigSynchro_IT_StubWithCallback HAL_TIM_SlaveConfigSynchro_IT_Stub
#define HAL_TIM_DMABurst_WriteStart_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_DMABurst_WriteStart requires _IgnoreAndReturn");
#define HAL_TIM_DMABurst_WriteStart_IgnoreAndReturn(cmock_retval) HAL_TIM_DMABurst_WriteStart_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_DMABurst_WriteStart_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_DMABurst_WriteStart_StopIgnore() HAL_TIM_DMABurst_WriteStart_CMockStopIgnore()
void HAL_TIM_DMABurst_WriteStart_CMockStopIgnore(void);
#define HAL_TIM_DMABurst_WriteStart_Expect(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength) TEST_FAIL_MESSAGE("HAL_TIM_DMABurst_WriteStart requires _ExpectAndReturn");
#define HAL_TIM_DMABurst_WriteStart_ExpectAndReturn(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength, cmock_retval) HAL_TIM_DMABurst_WriteStart_CMockExpectAndReturn(__LINE__, htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength, cmock_retval)
void HAL_TIM_DMABurst_WriteStart_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, const uint32_t* BurstBuffer, uint32_t BurstLength, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_DMABurst_WriteStart_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, const uint32_t* BurstBuffer, uint32_t BurstLength, int cmock_num_calls);
void HAL_TIM_DMABurst_WriteStart_AddCallback(CMOCK_HAL_TIM_DMABurst_WriteStart_CALLBACK Callback);
void HAL_TIM_DMABurst_WriteStart_Stub(CMOCK_HAL_TIM_DMABurst_WriteStart_CALLBACK Callback);
#define HAL_TIM_DMABurst_WriteStart_StubWithCallback HAL_TIM_DMABurst_WriteStart_Stub
#define HAL_TIM_DMABurst_MultiWriteStart_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_DMABurst_MultiWriteStart requires _IgnoreAndReturn");
#define HAL_TIM_DMABurst_MultiWriteStart_IgnoreAndReturn(cmock_retval) HAL_TIM_DMABurst_MultiWriteStart_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_DMABurst_MultiWriteStart_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_DMABurst_MultiWriteStart_StopIgnore() HAL_TIM_DMABurst_MultiWriteStart_CMockStopIgnore()
void HAL_TIM_DMABurst_MultiWriteStart_CMockStopIgnore(void);
#define HAL_TIM_DMABurst_MultiWriteStart_Expect(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength, DataLength) TEST_FAIL_MESSAGE("HAL_TIM_DMABurst_MultiWriteStart requires _ExpectAndReturn");
#define HAL_TIM_DMABurst_MultiWriteStart_ExpectAndReturn(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength, DataLength, cmock_retval) HAL_TIM_DMABurst_MultiWriteStart_CMockExpectAndReturn(__LINE__, htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength, DataLength, cmock_retval)
void HAL_TIM_DMABurst_MultiWriteStart_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, const uint32_t* BurstBuffer, uint32_t BurstLength, uint32_t DataLength, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_DMABurst_MultiWriteStart_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, const uint32_t* BurstBuffer, uint32_t BurstLength, uint32_t DataLength, int cmock_num_calls);
void HAL_TIM_DMABurst_MultiWriteStart_AddCallback(CMOCK_HAL_TIM_DMABurst_MultiWriteStart_CALLBACK Callback);
void HAL_TIM_DMABurst_MultiWriteStart_Stub(CMOCK_HAL_TIM_DMABurst_MultiWriteStart_CALLBACK Callback);
#define HAL_TIM_DMABurst_MultiWriteStart_StubWithCallback HAL_TIM_DMABurst_MultiWriteStart_Stub
#define HAL_TIM_DMABurst_WriteStop_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_DMABurst_WriteStop requires _IgnoreAndReturn");
#define HAL_TIM_DMABurst_WriteStop_IgnoreAndReturn(cmock_retval) HAL_TIM_DMABurst_WriteStop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_DMABurst_WriteStop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_DMABurst_WriteStop_StopIgnore() HAL_TIM_DMABurst_WriteStop_CMockStopIgnore()
void HAL_TIM_DMABurst_WriteStop_CMockStopIgnore(void);
#define HAL_TIM_DMABurst_WriteStop_Expect(htim, BurstRequestSrc) TEST_FAIL_MESSAGE("HAL_TIM_DMABurst_WriteStop requires _ExpectAndReturn");
#define HAL_TIM_DMABurst_WriteStop_ExpectAndReturn(htim, BurstRequestSrc, cmock_retval) HAL_TIM_DMABurst_WriteStop_CMockExpectAndReturn(__LINE__, htim, BurstRequestSrc, cmock_retval)
void HAL_TIM_DMABurst_WriteStop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t BurstRequestSrc, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_DMABurst_WriteStop_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t BurstRequestSrc, int cmock_num_calls);
void HAL_TIM_DMABurst_WriteStop_AddCallback(CMOCK_HAL_TIM_DMABurst_WriteStop_CALLBACK Callback);
void HAL_TIM_DMABurst_WriteStop_Stub(CMOCK_HAL_TIM_DMABurst_WriteStop_CALLBACK Callback);
#define HAL_TIM_DMABurst_WriteStop_StubWithCallback HAL_TIM_DMABurst_WriteStop_Stub
#define HAL_TIM_DMABurst_ReadStart_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_DMABurst_ReadStart requires _IgnoreAndReturn");
#define HAL_TIM_DMABurst_ReadStart_IgnoreAndReturn(cmock_retval) HAL_TIM_DMABurst_ReadStart_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_DMABurst_ReadStart_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_DMABurst_ReadStart_StopIgnore() HAL_TIM_DMABurst_ReadStart_CMockStopIgnore()
void HAL_TIM_DMABurst_ReadStart_CMockStopIgnore(void);
#define HAL_TIM_DMABurst_ReadStart_Expect(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength) TEST_FAIL_MESSAGE("HAL_TIM_DMABurst_ReadStart requires _ExpectAndReturn");
#define HAL_TIM_DMABurst_ReadStart_ExpectAndReturn(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength, cmock_retval) HAL_TIM_DMABurst_ReadStart_CMockExpectAndReturn(__LINE__, htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength, cmock_retval)
void HAL_TIM_DMABurst_ReadStart_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, uint32_t* BurstBuffer, uint32_t BurstLength, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_DMABurst_ReadStart_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, uint32_t* BurstBuffer, uint32_t BurstLength, int cmock_num_calls);
void HAL_TIM_DMABurst_ReadStart_AddCallback(CMOCK_HAL_TIM_DMABurst_ReadStart_CALLBACK Callback);
void HAL_TIM_DMABurst_ReadStart_Stub(CMOCK_HAL_TIM_DMABurst_ReadStart_CALLBACK Callback);
#define HAL_TIM_DMABurst_ReadStart_StubWithCallback HAL_TIM_DMABurst_ReadStart_Stub
#define HAL_TIM_DMABurst_MultiReadStart_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_DMABurst_MultiReadStart requires _IgnoreAndReturn");
#define HAL_TIM_DMABurst_MultiReadStart_IgnoreAndReturn(cmock_retval) HAL_TIM_DMABurst_MultiReadStart_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_DMABurst_MultiReadStart_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_DMABurst_MultiReadStart_StopIgnore() HAL_TIM_DMABurst_MultiReadStart_CMockStopIgnore()
void HAL_TIM_DMABurst_MultiReadStart_CMockStopIgnore(void);
#define HAL_TIM_DMABurst_MultiReadStart_Expect(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength, DataLength) TEST_FAIL_MESSAGE("HAL_TIM_DMABurst_MultiReadStart requires _ExpectAndReturn");
#define HAL_TIM_DMABurst_MultiReadStart_ExpectAndReturn(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength, DataLength, cmock_retval) HAL_TIM_DMABurst_MultiReadStart_CMockExpectAndReturn(__LINE__, htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength, DataLength, cmock_retval)
void HAL_TIM_DMABurst_MultiReadStart_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, uint32_t* BurstBuffer, uint32_t BurstLength, uint32_t DataLength, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_DMABurst_MultiReadStart_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, uint32_t* BurstBuffer, uint32_t BurstLength, uint32_t DataLength, int cmock_num_calls);
void HAL_TIM_DMABurst_MultiReadStart_AddCallback(CMOCK_HAL_TIM_DMABurst_MultiReadStart_CALLBACK Callback);
void HAL_TIM_DMABurst_MultiReadStart_Stub(CMOCK_HAL_TIM_DMABurst_MultiReadStart_CALLBACK Callback);
#define HAL_TIM_DMABurst_MultiReadStart_StubWithCallback HAL_TIM_DMABurst_MultiReadStart_Stub
#define HAL_TIM_DMABurst_ReadStop_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_DMABurst_ReadStop requires _IgnoreAndReturn");
#define HAL_TIM_DMABurst_ReadStop_IgnoreAndReturn(cmock_retval) HAL_TIM_DMABurst_ReadStop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_DMABurst_ReadStop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_DMABurst_ReadStop_StopIgnore() HAL_TIM_DMABurst_ReadStop_CMockStopIgnore()
void HAL_TIM_DMABurst_ReadStop_CMockStopIgnore(void);
#define HAL_TIM_DMABurst_ReadStop_Expect(htim, BurstRequestSrc) TEST_FAIL_MESSAGE("HAL_TIM_DMABurst_ReadStop requires _ExpectAndReturn");
#define HAL_TIM_DMABurst_ReadStop_ExpectAndReturn(htim, BurstRequestSrc, cmock_retval) HAL_TIM_DMABurst_ReadStop_CMockExpectAndReturn(__LINE__, htim, BurstRequestSrc, cmock_retval)
void HAL_TIM_DMABurst_ReadStop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t BurstRequestSrc, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_DMABurst_ReadStop_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t BurstRequestSrc, int cmock_num_calls);
void HAL_TIM_DMABurst_ReadStop_AddCallback(CMOCK_HAL_TIM_DMABurst_ReadStop_CALLBACK Callback);
void HAL_TIM_DMABurst_ReadStop_Stub(CMOCK_HAL_TIM_DMABurst_ReadStop_CALLBACK Callback);
#define HAL_TIM_DMABurst_ReadStop_StubWithCallback HAL_TIM_DMABurst_ReadStop_Stub
#define HAL_TIM_GenerateEvent_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_GenerateEvent requires _IgnoreAndReturn");
#define HAL_TIM_GenerateEvent_IgnoreAndReturn(cmock_retval) HAL_TIM_GenerateEvent_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_GenerateEvent_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_TIM_GenerateEvent_StopIgnore() HAL_TIM_GenerateEvent_CMockStopIgnore()
void HAL_TIM_GenerateEvent_CMockStopIgnore(void);
#define HAL_TIM_GenerateEvent_Expect(htim, EventSource) TEST_FAIL_MESSAGE("HAL_TIM_GenerateEvent requires _ExpectAndReturn");
#define HAL_TIM_GenerateEvent_ExpectAndReturn(htim, EventSource, cmock_retval) HAL_TIM_GenerateEvent_CMockExpectAndReturn(__LINE__, htim, EventSource, cmock_retval)
void HAL_TIM_GenerateEvent_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t EventSource, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_TIM_GenerateEvent_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t EventSource, int cmock_num_calls);
void HAL_TIM_GenerateEvent_AddCallback(CMOCK_HAL_TIM_GenerateEvent_CALLBACK Callback);
void HAL_TIM_GenerateEvent_Stub(CMOCK_HAL_TIM_GenerateEvent_CALLBACK Callback);
#define HAL_TIM_GenerateEvent_StubWithCallback HAL_TIM_GenerateEvent_Stub
#define HAL_TIM_ReadCapturedValue_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_ReadCapturedValue requires _IgnoreAndReturn");
#define HAL_TIM_ReadCapturedValue_IgnoreAndReturn(cmock_retval) HAL_TIM_ReadCapturedValue_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_ReadCapturedValue_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define HAL_TIM_ReadCapturedValue_StopIgnore() HAL_TIM_ReadCapturedValue_CMockStopIgnore()
void HAL_TIM_ReadCapturedValue_CMockStopIgnore(void);
#define HAL_TIM_ReadCapturedValue_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_ReadCapturedValue requires _ExpectAndReturn");
#define HAL_TIM_ReadCapturedValue_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_ReadCapturedValue_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_ReadCapturedValue_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TIM_HandleTypeDef* htim, uint32_t Channel, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_HAL_TIM_ReadCapturedValue_CALLBACK)(const TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_ReadCapturedValue_AddCallback(CMOCK_HAL_TIM_ReadCapturedValue_CALLBACK Callback);
void HAL_TIM_ReadCapturedValue_Stub(CMOCK_HAL_TIM_ReadCapturedValue_CALLBACK Callback);
#define HAL_TIM_ReadCapturedValue_StubWithCallback HAL_TIM_ReadCapturedValue_Stub
#define HAL_TIM_PeriodElapsedCallback_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_PeriodElapsedCallback requires _Ignore (not AndReturn)");
#define HAL_TIM_PeriodElapsedCallback_Ignore() HAL_TIM_PeriodElapsedCallback_CMockIgnore()
void HAL_TIM_PeriodElapsedCallback_CMockIgnore(void);
#define HAL_TIM_PeriodElapsedCallback_StopIgnore() HAL_TIM_PeriodElapsedCallback_CMockStopIgnore()
void HAL_TIM_PeriodElapsedCallback_CMockStopIgnore(void);
#define HAL_TIM_PeriodElapsedCallback_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_PeriodElapsedCallback requires _Expect (not AndReturn)");
#define HAL_TIM_PeriodElapsedCallback_Expect(htim) HAL_TIM_PeriodElapsedCallback_CMockExpect(__LINE__, htim)
void HAL_TIM_PeriodElapsedCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_PeriodElapsedCallback_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_PeriodElapsedCallback_AddCallback(CMOCK_HAL_TIM_PeriodElapsedCallback_CALLBACK Callback);
void HAL_TIM_PeriodElapsedCallback_Stub(CMOCK_HAL_TIM_PeriodElapsedCallback_CALLBACK Callback);
#define HAL_TIM_PeriodElapsedCallback_StubWithCallback HAL_TIM_PeriodElapsedCallback_Stub
#define HAL_TIM_PeriodElapsedHalfCpltCallback_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_PeriodElapsedHalfCpltCallback requires _Ignore (not AndReturn)");
#define HAL_TIM_PeriodElapsedHalfCpltCallback_Ignore() HAL_TIM_PeriodElapsedHalfCpltCallback_CMockIgnore()
void HAL_TIM_PeriodElapsedHalfCpltCallback_CMockIgnore(void);
#define HAL_TIM_PeriodElapsedHalfCpltCallback_StopIgnore() HAL_TIM_PeriodElapsedHalfCpltCallback_CMockStopIgnore()
void HAL_TIM_PeriodElapsedHalfCpltCallback_CMockStopIgnore(void);
#define HAL_TIM_PeriodElapsedHalfCpltCallback_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_PeriodElapsedHalfCpltCallback requires _Expect (not AndReturn)");
#define HAL_TIM_PeriodElapsedHalfCpltCallback_Expect(htim) HAL_TIM_PeriodElapsedHalfCpltCallback_CMockExpect(__LINE__, htim)
void HAL_TIM_PeriodElapsedHalfCpltCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_PeriodElapsedHalfCpltCallback_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_PeriodElapsedHalfCpltCallback_AddCallback(CMOCK_HAL_TIM_PeriodElapsedHalfCpltCallback_CALLBACK Callback);
void HAL_TIM_PeriodElapsedHalfCpltCallback_Stub(CMOCK_HAL_TIM_PeriodElapsedHalfCpltCallback_CALLBACK Callback);
#define HAL_TIM_PeriodElapsedHalfCpltCallback_StubWithCallback HAL_TIM_PeriodElapsedHalfCpltCallback_Stub
#define HAL_TIM_OC_DelayElapsedCallback_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_OC_DelayElapsedCallback requires _Ignore (not AndReturn)");
#define HAL_TIM_OC_DelayElapsedCallback_Ignore() HAL_TIM_OC_DelayElapsedCallback_CMockIgnore()
void HAL_TIM_OC_DelayElapsedCallback_CMockIgnore(void);
#define HAL_TIM_OC_DelayElapsedCallback_StopIgnore() HAL_TIM_OC_DelayElapsedCallback_CMockStopIgnore()
void HAL_TIM_OC_DelayElapsedCallback_CMockStopIgnore(void);
#define HAL_TIM_OC_DelayElapsedCallback_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_OC_DelayElapsedCallback requires _Expect (not AndReturn)");
#define HAL_TIM_OC_DelayElapsedCallback_Expect(htim) HAL_TIM_OC_DelayElapsedCallback_CMockExpect(__LINE__, htim)
void HAL_TIM_OC_DelayElapsedCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_OC_DelayElapsedCallback_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_OC_DelayElapsedCallback_AddCallback(CMOCK_HAL_TIM_OC_DelayElapsedCallback_CALLBACK Callback);
void HAL_TIM_OC_DelayElapsedCallback_Stub(CMOCK_HAL_TIM_OC_DelayElapsedCallback_CALLBACK Callback);
#define HAL_TIM_OC_DelayElapsedCallback_StubWithCallback HAL_TIM_OC_DelayElapsedCallback_Stub
#define HAL_TIM_IC_CaptureCallback_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_IC_CaptureCallback requires _Ignore (not AndReturn)");
#define HAL_TIM_IC_CaptureCallback_Ignore() HAL_TIM_IC_CaptureCallback_CMockIgnore()
void HAL_TIM_IC_CaptureCallback_CMockIgnore(void);
#define HAL_TIM_IC_CaptureCallback_StopIgnore() HAL_TIM_IC_CaptureCallback_CMockStopIgnore()
void HAL_TIM_IC_CaptureCallback_CMockStopIgnore(void);
#define HAL_TIM_IC_CaptureCallback_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_IC_CaptureCallback requires _Expect (not AndReturn)");
#define HAL_TIM_IC_CaptureCallback_Expect(htim) HAL_TIM_IC_CaptureCallback_CMockExpect(__LINE__, htim)
void HAL_TIM_IC_CaptureCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_IC_CaptureCallback_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_IC_CaptureCallback_AddCallback(CMOCK_HAL_TIM_IC_CaptureCallback_CALLBACK Callback);
void HAL_TIM_IC_CaptureCallback_Stub(CMOCK_HAL_TIM_IC_CaptureCallback_CALLBACK Callback);
#define HAL_TIM_IC_CaptureCallback_StubWithCallback HAL_TIM_IC_CaptureCallback_Stub
#define HAL_TIM_IC_CaptureHalfCpltCallback_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_IC_CaptureHalfCpltCallback requires _Ignore (not AndReturn)");
#define HAL_TIM_IC_CaptureHalfCpltCallback_Ignore() HAL_TIM_IC_CaptureHalfCpltCallback_CMockIgnore()
void HAL_TIM_IC_CaptureHalfCpltCallback_CMockIgnore(void);
#define HAL_TIM_IC_CaptureHalfCpltCallback_StopIgnore() HAL_TIM_IC_CaptureHalfCpltCallback_CMockStopIgnore()
void HAL_TIM_IC_CaptureHalfCpltCallback_CMockStopIgnore(void);
#define HAL_TIM_IC_CaptureHalfCpltCallback_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_IC_CaptureHalfCpltCallback requires _Expect (not AndReturn)");
#define HAL_TIM_IC_CaptureHalfCpltCallback_Expect(htim) HAL_TIM_IC_CaptureHalfCpltCallback_CMockExpect(__LINE__, htim)
void HAL_TIM_IC_CaptureHalfCpltCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_IC_CaptureHalfCpltCallback_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_IC_CaptureHalfCpltCallback_AddCallback(CMOCK_HAL_TIM_IC_CaptureHalfCpltCallback_CALLBACK Callback);
void HAL_TIM_IC_CaptureHalfCpltCallback_Stub(CMOCK_HAL_TIM_IC_CaptureHalfCpltCallback_CALLBACK Callback);
#define HAL_TIM_IC_CaptureHalfCpltCallback_StubWithCallback HAL_TIM_IC_CaptureHalfCpltCallback_Stub
#define HAL_TIM_PWM_PulseFinishedCallback_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_PWM_PulseFinishedCallback requires _Ignore (not AndReturn)");
#define HAL_TIM_PWM_PulseFinishedCallback_Ignore() HAL_TIM_PWM_PulseFinishedCallback_CMockIgnore()
void HAL_TIM_PWM_PulseFinishedCallback_CMockIgnore(void);
#define HAL_TIM_PWM_PulseFinishedCallback_StopIgnore() HAL_TIM_PWM_PulseFinishedCallback_CMockStopIgnore()
void HAL_TIM_PWM_PulseFinishedCallback_CMockStopIgnore(void);
#define HAL_TIM_PWM_PulseFinishedCallback_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_PWM_PulseFinishedCallback requires _Expect (not AndReturn)");
#define HAL_TIM_PWM_PulseFinishedCallback_Expect(htim) HAL_TIM_PWM_PulseFinishedCallback_CMockExpect(__LINE__, htim)
void HAL_TIM_PWM_PulseFinishedCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_PWM_PulseFinishedCallback_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_PWM_PulseFinishedCallback_AddCallback(CMOCK_HAL_TIM_PWM_PulseFinishedCallback_CALLBACK Callback);
void HAL_TIM_PWM_PulseFinishedCallback_Stub(CMOCK_HAL_TIM_PWM_PulseFinishedCallback_CALLBACK Callback);
#define HAL_TIM_PWM_PulseFinishedCallback_StubWithCallback HAL_TIM_PWM_PulseFinishedCallback_Stub
#define HAL_TIM_PWM_PulseFinishedHalfCpltCallback_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_PWM_PulseFinishedHalfCpltCallback requires _Ignore (not AndReturn)");
#define HAL_TIM_PWM_PulseFinishedHalfCpltCallback_Ignore() HAL_TIM_PWM_PulseFinishedHalfCpltCallback_CMockIgnore()
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback_CMockIgnore(void);
#define HAL_TIM_PWM_PulseFinishedHalfCpltCallback_StopIgnore() HAL_TIM_PWM_PulseFinishedHalfCpltCallback_CMockStopIgnore()
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback_CMockStopIgnore(void);
#define HAL_TIM_PWM_PulseFinishedHalfCpltCallback_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_PWM_PulseFinishedHalfCpltCallback requires _Expect (not AndReturn)");
#define HAL_TIM_PWM_PulseFinishedHalfCpltCallback_Expect(htim) HAL_TIM_PWM_PulseFinishedHalfCpltCallback_CMockExpect(__LINE__, htim)
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_PWM_PulseFinishedHalfCpltCallback_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback_AddCallback(CMOCK_HAL_TIM_PWM_PulseFinishedHalfCpltCallback_CALLBACK Callback);
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback_Stub(CMOCK_HAL_TIM_PWM_PulseFinishedHalfCpltCallback_CALLBACK Callback);
#define HAL_TIM_PWM_PulseFinishedHalfCpltCallback_StubWithCallback HAL_TIM_PWM_PulseFinishedHalfCpltCallback_Stub
#define HAL_TIM_TriggerCallback_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_TriggerCallback requires _Ignore (not AndReturn)");
#define HAL_TIM_TriggerCallback_Ignore() HAL_TIM_TriggerCallback_CMockIgnore()
void HAL_TIM_TriggerCallback_CMockIgnore(void);
#define HAL_TIM_TriggerCallback_StopIgnore() HAL_TIM_TriggerCallback_CMockStopIgnore()
void HAL_TIM_TriggerCallback_CMockStopIgnore(void);
#define HAL_TIM_TriggerCallback_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_TriggerCallback requires _Expect (not AndReturn)");
#define HAL_TIM_TriggerCallback_Expect(htim) HAL_TIM_TriggerCallback_CMockExpect(__LINE__, htim)
void HAL_TIM_TriggerCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_TriggerCallback_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_TriggerCallback_AddCallback(CMOCK_HAL_TIM_TriggerCallback_CALLBACK Callback);
void HAL_TIM_TriggerCallback_Stub(CMOCK_HAL_TIM_TriggerCallback_CALLBACK Callback);
#define HAL_TIM_TriggerCallback_StubWithCallback HAL_TIM_TriggerCallback_Stub
#define HAL_TIM_TriggerHalfCpltCallback_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_TriggerHalfCpltCallback requires _Ignore (not AndReturn)");
#define HAL_TIM_TriggerHalfCpltCallback_Ignore() HAL_TIM_TriggerHalfCpltCallback_CMockIgnore()
void HAL_TIM_TriggerHalfCpltCallback_CMockIgnore(void);
#define HAL_TIM_TriggerHalfCpltCallback_StopIgnore() HAL_TIM_TriggerHalfCpltCallback_CMockStopIgnore()
void HAL_TIM_TriggerHalfCpltCallback_CMockStopIgnore(void);
#define HAL_TIM_TriggerHalfCpltCallback_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_TriggerHalfCpltCallback requires _Expect (not AndReturn)");
#define HAL_TIM_TriggerHalfCpltCallback_Expect(htim) HAL_TIM_TriggerHalfCpltCallback_CMockExpect(__LINE__, htim)
void HAL_TIM_TriggerHalfCpltCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_TriggerHalfCpltCallback_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_TriggerHalfCpltCallback_AddCallback(CMOCK_HAL_TIM_TriggerHalfCpltCallback_CALLBACK Callback);
void HAL_TIM_TriggerHalfCpltCallback_Stub(CMOCK_HAL_TIM_TriggerHalfCpltCallback_CALLBACK Callback);
#define HAL_TIM_TriggerHalfCpltCallback_StubWithCallback HAL_TIM_TriggerHalfCpltCallback_Stub
#define HAL_TIM_ErrorCallback_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_ErrorCallback requires _Ignore (not AndReturn)");
#define HAL_TIM_ErrorCallback_Ignore() HAL_TIM_ErrorCallback_CMockIgnore()
void HAL_TIM_ErrorCallback_CMockIgnore(void);
#define HAL_TIM_ErrorCallback_StopIgnore() HAL_TIM_ErrorCallback_CMockStopIgnore()
void HAL_TIM_ErrorCallback_CMockStopIgnore(void);
#define HAL_TIM_ErrorCallback_ExpectAndReturn(htim, cmock_retval) TEST_FAIL_MESSAGE("HAL_TIM_ErrorCallback requires _Expect (not AndReturn)");
#define HAL_TIM_ErrorCallback_Expect(htim) HAL_TIM_ErrorCallback_CMockExpect(__LINE__, htim)
void HAL_TIM_ErrorCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim);
typedef void (* CMOCK_HAL_TIM_ErrorCallback_CALLBACK)(TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_ErrorCallback_AddCallback(CMOCK_HAL_TIM_ErrorCallback_CALLBACK Callback);
void HAL_TIM_ErrorCallback_Stub(CMOCK_HAL_TIM_ErrorCallback_CALLBACK Callback);
#define HAL_TIM_ErrorCallback_StubWithCallback HAL_TIM_ErrorCallback_Stub
#define HAL_TIM_Base_GetState_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Base_GetState requires _IgnoreAndReturn");
#define HAL_TIM_Base_GetState_IgnoreAndReturn(cmock_retval) HAL_TIM_Base_GetState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Base_GetState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_TIM_StateTypeDef cmock_to_return);
#define HAL_TIM_Base_GetState_StopIgnore() HAL_TIM_Base_GetState_CMockStopIgnore()
void HAL_TIM_Base_GetState_CMockStopIgnore(void);
#define HAL_TIM_Base_GetState_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_Base_GetState requires _ExpectAndReturn");
#define HAL_TIM_Base_GetState_ExpectAndReturn(htim, cmock_retval) HAL_TIM_Base_GetState_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_Base_GetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TIM_HandleTypeDef* htim, HAL_TIM_StateTypeDef cmock_to_return);
typedef HAL_TIM_StateTypeDef (* CMOCK_HAL_TIM_Base_GetState_CALLBACK)(const TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_Base_GetState_AddCallback(CMOCK_HAL_TIM_Base_GetState_CALLBACK Callback);
void HAL_TIM_Base_GetState_Stub(CMOCK_HAL_TIM_Base_GetState_CALLBACK Callback);
#define HAL_TIM_Base_GetState_StubWithCallback HAL_TIM_Base_GetState_Stub
#define HAL_TIM_OC_GetState_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OC_GetState requires _IgnoreAndReturn");
#define HAL_TIM_OC_GetState_IgnoreAndReturn(cmock_retval) HAL_TIM_OC_GetState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OC_GetState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_TIM_StateTypeDef cmock_to_return);
#define HAL_TIM_OC_GetState_StopIgnore() HAL_TIM_OC_GetState_CMockStopIgnore()
void HAL_TIM_OC_GetState_CMockStopIgnore(void);
#define HAL_TIM_OC_GetState_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_OC_GetState requires _ExpectAndReturn");
#define HAL_TIM_OC_GetState_ExpectAndReturn(htim, cmock_retval) HAL_TIM_OC_GetState_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_OC_GetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TIM_HandleTypeDef* htim, HAL_TIM_StateTypeDef cmock_to_return);
typedef HAL_TIM_StateTypeDef (* CMOCK_HAL_TIM_OC_GetState_CALLBACK)(const TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_OC_GetState_AddCallback(CMOCK_HAL_TIM_OC_GetState_CALLBACK Callback);
void HAL_TIM_OC_GetState_Stub(CMOCK_HAL_TIM_OC_GetState_CALLBACK Callback);
#define HAL_TIM_OC_GetState_StubWithCallback HAL_TIM_OC_GetState_Stub
#define HAL_TIM_PWM_GetState_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_PWM_GetState requires _IgnoreAndReturn");
#define HAL_TIM_PWM_GetState_IgnoreAndReturn(cmock_retval) HAL_TIM_PWM_GetState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_PWM_GetState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_TIM_StateTypeDef cmock_to_return);
#define HAL_TIM_PWM_GetState_StopIgnore() HAL_TIM_PWM_GetState_CMockStopIgnore()
void HAL_TIM_PWM_GetState_CMockStopIgnore(void);
#define HAL_TIM_PWM_GetState_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_PWM_GetState requires _ExpectAndReturn");
#define HAL_TIM_PWM_GetState_ExpectAndReturn(htim, cmock_retval) HAL_TIM_PWM_GetState_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_PWM_GetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TIM_HandleTypeDef* htim, HAL_TIM_StateTypeDef cmock_to_return);
typedef HAL_TIM_StateTypeDef (* CMOCK_HAL_TIM_PWM_GetState_CALLBACK)(const TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_PWM_GetState_AddCallback(CMOCK_HAL_TIM_PWM_GetState_CALLBACK Callback);
void HAL_TIM_PWM_GetState_Stub(CMOCK_HAL_TIM_PWM_GetState_CALLBACK Callback);
#define HAL_TIM_PWM_GetState_StubWithCallback HAL_TIM_PWM_GetState_Stub
#define HAL_TIM_IC_GetState_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_IC_GetState requires _IgnoreAndReturn");
#define HAL_TIM_IC_GetState_IgnoreAndReturn(cmock_retval) HAL_TIM_IC_GetState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_IC_GetState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_TIM_StateTypeDef cmock_to_return);
#define HAL_TIM_IC_GetState_StopIgnore() HAL_TIM_IC_GetState_CMockStopIgnore()
void HAL_TIM_IC_GetState_CMockStopIgnore(void);
#define HAL_TIM_IC_GetState_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_IC_GetState requires _ExpectAndReturn");
#define HAL_TIM_IC_GetState_ExpectAndReturn(htim, cmock_retval) HAL_TIM_IC_GetState_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_IC_GetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TIM_HandleTypeDef* htim, HAL_TIM_StateTypeDef cmock_to_return);
typedef HAL_TIM_StateTypeDef (* CMOCK_HAL_TIM_IC_GetState_CALLBACK)(const TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_IC_GetState_AddCallback(CMOCK_HAL_TIM_IC_GetState_CALLBACK Callback);
void HAL_TIM_IC_GetState_Stub(CMOCK_HAL_TIM_IC_GetState_CALLBACK Callback);
#define HAL_TIM_IC_GetState_StubWithCallback HAL_TIM_IC_GetState_Stub
#define HAL_TIM_OnePulse_GetState_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_GetState requires _IgnoreAndReturn");
#define HAL_TIM_OnePulse_GetState_IgnoreAndReturn(cmock_retval) HAL_TIM_OnePulse_GetState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_OnePulse_GetState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_TIM_StateTypeDef cmock_to_return);
#define HAL_TIM_OnePulse_GetState_StopIgnore() HAL_TIM_OnePulse_GetState_CMockStopIgnore()
void HAL_TIM_OnePulse_GetState_CMockStopIgnore(void);
#define HAL_TIM_OnePulse_GetState_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_OnePulse_GetState requires _ExpectAndReturn");
#define HAL_TIM_OnePulse_GetState_ExpectAndReturn(htim, cmock_retval) HAL_TIM_OnePulse_GetState_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_OnePulse_GetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TIM_HandleTypeDef* htim, HAL_TIM_StateTypeDef cmock_to_return);
typedef HAL_TIM_StateTypeDef (* CMOCK_HAL_TIM_OnePulse_GetState_CALLBACK)(const TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_OnePulse_GetState_AddCallback(CMOCK_HAL_TIM_OnePulse_GetState_CALLBACK Callback);
void HAL_TIM_OnePulse_GetState_Stub(CMOCK_HAL_TIM_OnePulse_GetState_CALLBACK Callback);
#define HAL_TIM_OnePulse_GetState_StubWithCallback HAL_TIM_OnePulse_GetState_Stub
#define HAL_TIM_Encoder_GetState_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_Encoder_GetState requires _IgnoreAndReturn");
#define HAL_TIM_Encoder_GetState_IgnoreAndReturn(cmock_retval) HAL_TIM_Encoder_GetState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_Encoder_GetState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_TIM_StateTypeDef cmock_to_return);
#define HAL_TIM_Encoder_GetState_StopIgnore() HAL_TIM_Encoder_GetState_CMockStopIgnore()
void HAL_TIM_Encoder_GetState_CMockStopIgnore(void);
#define HAL_TIM_Encoder_GetState_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_Encoder_GetState requires _ExpectAndReturn");
#define HAL_TIM_Encoder_GetState_ExpectAndReturn(htim, cmock_retval) HAL_TIM_Encoder_GetState_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_Encoder_GetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TIM_HandleTypeDef* htim, HAL_TIM_StateTypeDef cmock_to_return);
typedef HAL_TIM_StateTypeDef (* CMOCK_HAL_TIM_Encoder_GetState_CALLBACK)(const TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_Encoder_GetState_AddCallback(CMOCK_HAL_TIM_Encoder_GetState_CALLBACK Callback);
void HAL_TIM_Encoder_GetState_Stub(CMOCK_HAL_TIM_Encoder_GetState_CALLBACK Callback);
#define HAL_TIM_Encoder_GetState_StubWithCallback HAL_TIM_Encoder_GetState_Stub
#define HAL_TIM_GetActiveChannel_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_GetActiveChannel requires _IgnoreAndReturn");
#define HAL_TIM_GetActiveChannel_IgnoreAndReturn(cmock_retval) HAL_TIM_GetActiveChannel_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_GetActiveChannel_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_TIM_ActiveChannel cmock_to_return);
#define HAL_TIM_GetActiveChannel_StopIgnore() HAL_TIM_GetActiveChannel_CMockStopIgnore()
void HAL_TIM_GetActiveChannel_CMockStopIgnore(void);
#define HAL_TIM_GetActiveChannel_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_GetActiveChannel requires _ExpectAndReturn");
#define HAL_TIM_GetActiveChannel_ExpectAndReturn(htim, cmock_retval) HAL_TIM_GetActiveChannel_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_GetActiveChannel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TIM_HandleTypeDef* htim, HAL_TIM_ActiveChannel cmock_to_return);
typedef HAL_TIM_ActiveChannel (* CMOCK_HAL_TIM_GetActiveChannel_CALLBACK)(const TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_GetActiveChannel_AddCallback(CMOCK_HAL_TIM_GetActiveChannel_CALLBACK Callback);
void HAL_TIM_GetActiveChannel_Stub(CMOCK_HAL_TIM_GetActiveChannel_CALLBACK Callback);
#define HAL_TIM_GetActiveChannel_StubWithCallback HAL_TIM_GetActiveChannel_Stub
#define HAL_TIM_GetChannelState_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_GetChannelState requires _IgnoreAndReturn");
#define HAL_TIM_GetChannelState_IgnoreAndReturn(cmock_retval) HAL_TIM_GetChannelState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_GetChannelState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_TIM_ChannelStateTypeDef cmock_to_return);
#define HAL_TIM_GetChannelState_StopIgnore() HAL_TIM_GetChannelState_CMockStopIgnore()
void HAL_TIM_GetChannelState_CMockStopIgnore(void);
#define HAL_TIM_GetChannelState_Expect(htim, Channel) TEST_FAIL_MESSAGE("HAL_TIM_GetChannelState requires _ExpectAndReturn");
#define HAL_TIM_GetChannelState_ExpectAndReturn(htim, Channel, cmock_retval) HAL_TIM_GetChannelState_CMockExpectAndReturn(__LINE__, htim, Channel, cmock_retval)
void HAL_TIM_GetChannelState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TIM_HandleTypeDef* htim, uint32_t Channel, HAL_TIM_ChannelStateTypeDef cmock_to_return);
typedef HAL_TIM_ChannelStateTypeDef (* CMOCK_HAL_TIM_GetChannelState_CALLBACK)(const TIM_HandleTypeDef* htim, uint32_t Channel, int cmock_num_calls);
void HAL_TIM_GetChannelState_AddCallback(CMOCK_HAL_TIM_GetChannelState_CALLBACK Callback);
void HAL_TIM_GetChannelState_Stub(CMOCK_HAL_TIM_GetChannelState_CALLBACK Callback);
#define HAL_TIM_GetChannelState_StubWithCallback HAL_TIM_GetChannelState_Stub
#define HAL_TIM_DMABurstState_Ignore() TEST_FAIL_MESSAGE("HAL_TIM_DMABurstState requires _IgnoreAndReturn");
#define HAL_TIM_DMABurstState_IgnoreAndReturn(cmock_retval) HAL_TIM_DMABurstState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_TIM_DMABurstState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_TIM_DMABurstStateTypeDef cmock_to_return);
#define HAL_TIM_DMABurstState_StopIgnore() HAL_TIM_DMABurstState_CMockStopIgnore()
void HAL_TIM_DMABurstState_CMockStopIgnore(void);
#define HAL_TIM_DMABurstState_Expect(htim) TEST_FAIL_MESSAGE("HAL_TIM_DMABurstState requires _ExpectAndReturn");
#define HAL_TIM_DMABurstState_ExpectAndReturn(htim, cmock_retval) HAL_TIM_DMABurstState_CMockExpectAndReturn(__LINE__, htim, cmock_retval)
void HAL_TIM_DMABurstState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TIM_HandleTypeDef* htim, HAL_TIM_DMABurstStateTypeDef cmock_to_return);
typedef HAL_TIM_DMABurstStateTypeDef (* CMOCK_HAL_TIM_DMABurstState_CALLBACK)(const TIM_HandleTypeDef* htim, int cmock_num_calls);
void HAL_TIM_DMABurstState_AddCallback(CMOCK_HAL_TIM_DMABurstState_CALLBACK Callback);
void HAL_TIM_DMABurstState_Stub(CMOCK_HAL_TIM_DMABurstState_CALLBACK Callback);
#define HAL_TIM_DMABurstState_StubWithCallback HAL_TIM_DMABurstState_Stub
#define TIM_Base_SetConfig_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("TIM_Base_SetConfig requires _Ignore (not AndReturn)");
#define TIM_Base_SetConfig_Ignore() TIM_Base_SetConfig_CMockIgnore()
void TIM_Base_SetConfig_CMockIgnore(void);
#define TIM_Base_SetConfig_StopIgnore() TIM_Base_SetConfig_CMockStopIgnore()
void TIM_Base_SetConfig_CMockStopIgnore(void);
#define TIM_Base_SetConfig_ExpectAndReturn(TIMx, Structure, cmock_retval) TEST_FAIL_MESSAGE("TIM_Base_SetConfig requires _Expect (not AndReturn)");
#define TIM_Base_SetConfig_Expect(TIMx, Structure) TIM_Base_SetConfig_CMockExpect(__LINE__, TIMx, Structure)
void TIM_Base_SetConfig_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_TypeDef* TIMx, const TIM_Base_InitTypeDef* Structure);
typedef void (* CMOCK_TIM_Base_SetConfig_CALLBACK)(TIM_TypeDef* TIMx, const TIM_Base_InitTypeDef* Structure, int cmock_num_calls);
void TIM_Base_SetConfig_AddCallback(CMOCK_TIM_Base_SetConfig_CALLBACK Callback);
void TIM_Base_SetConfig_Stub(CMOCK_TIM_Base_SetConfig_CALLBACK Callback);
#define TIM_Base_SetConfig_StubWithCallback TIM_Base_SetConfig_Stub
#define TIM_TI1_SetConfig_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("TIM_TI1_SetConfig requires _Ignore (not AndReturn)");
#define TIM_TI1_SetConfig_Ignore() TIM_TI1_SetConfig_CMockIgnore()
void TIM_TI1_SetConfig_CMockIgnore(void);
#define TIM_TI1_SetConfig_StopIgnore() TIM_TI1_SetConfig_CMockStopIgnore()
void TIM_TI1_SetConfig_CMockStopIgnore(void);
#define TIM_TI1_SetConfig_ExpectAndReturn(TIMx, TIM_ICPolarity, TIM_ICSelection, TIM_ICFilter, cmock_retval) TEST_FAIL_MESSAGE("TIM_TI1_SetConfig requires _Expect (not AndReturn)");
#define TIM_TI1_SetConfig_Expect(TIMx, TIM_ICPolarity, TIM_ICSelection, TIM_ICFilter) TIM_TI1_SetConfig_CMockExpect(__LINE__, TIMx, TIM_ICPolarity, TIM_ICSelection, TIM_ICFilter)
void TIM_TI1_SetConfig_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_TypeDef* TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection, uint32_t TIM_ICFilter);
typedef void (* CMOCK_TIM_TI1_SetConfig_CALLBACK)(TIM_TypeDef* TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection, uint32_t TIM_ICFilter, int cmock_num_calls);
void TIM_TI1_SetConfig_AddCallback(CMOCK_TIM_TI1_SetConfig_CALLBACK Callback);
void TIM_TI1_SetConfig_Stub(CMOCK_TIM_TI1_SetConfig_CALLBACK Callback);
#define TIM_TI1_SetConfig_StubWithCallback TIM_TI1_SetConfig_Stub
#define TIM_OC2_SetConfig_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("TIM_OC2_SetConfig requires _Ignore (not AndReturn)");
#define TIM_OC2_SetConfig_Ignore() TIM_OC2_SetConfig_CMockIgnore()
void TIM_OC2_SetConfig_CMockIgnore(void);
#define TIM_OC2_SetConfig_StopIgnore() TIM_OC2_SetConfig_CMockStopIgnore()
void TIM_OC2_SetConfig_CMockStopIgnore(void);
#define TIM_OC2_SetConfig_ExpectAndReturn(TIMx, OC_Config, cmock_retval) TEST_FAIL_MESSAGE("TIM_OC2_SetConfig requires _Expect (not AndReturn)");
#define TIM_OC2_SetConfig_Expect(TIMx, OC_Config) TIM_OC2_SetConfig_CMockExpect(__LINE__, TIMx, OC_Config)
void TIM_OC2_SetConfig_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_TypeDef* TIMx, const TIM_OC_InitTypeDef* OC_Config);
typedef void (* CMOCK_TIM_OC2_SetConfig_CALLBACK)(TIM_TypeDef* TIMx, const TIM_OC_InitTypeDef* OC_Config, int cmock_num_calls);
void TIM_OC2_SetConfig_AddCallback(CMOCK_TIM_OC2_SetConfig_CALLBACK Callback);
void TIM_OC2_SetConfig_Stub(CMOCK_TIM_OC2_SetConfig_CALLBACK Callback);
#define TIM_OC2_SetConfig_StubWithCallback TIM_OC2_SetConfig_Stub
#define TIM_ETR_SetConfig_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("TIM_ETR_SetConfig requires _Ignore (not AndReturn)");
#define TIM_ETR_SetConfig_Ignore() TIM_ETR_SetConfig_CMockIgnore()
void TIM_ETR_SetConfig_CMockIgnore(void);
#define TIM_ETR_SetConfig_StopIgnore() TIM_ETR_SetConfig_CMockStopIgnore()
void TIM_ETR_SetConfig_CMockStopIgnore(void);
#define TIM_ETR_SetConfig_ExpectAndReturn(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter, cmock_retval) TEST_FAIL_MESSAGE("TIM_ETR_SetConfig requires _Expect (not AndReturn)");
#define TIM_ETR_SetConfig_Expect(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter) TIM_ETR_SetConfig_CMockExpect(__LINE__, TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter)
void TIM_ETR_SetConfig_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler, uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter);
typedef void (* CMOCK_TIM_ETR_SetConfig_CALLBACK)(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler, uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter, int cmock_num_calls);
void TIM_ETR_SetConfig_AddCallback(CMOCK_TIM_ETR_SetConfig_CALLBACK Callback);
void TIM_ETR_SetConfig_Stub(CMOCK_TIM_ETR_SetConfig_CALLBACK Callback);
#define TIM_ETR_SetConfig_StubWithCallback TIM_ETR_SetConfig_Stub
#define TIM_DMADelayPulseHalfCplt_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("TIM_DMADelayPulseHalfCplt requires _Ignore (not AndReturn)");
#define TIM_DMADelayPulseHalfCplt_Ignore() TIM_DMADelayPulseHalfCplt_CMockIgnore()
void TIM_DMADelayPulseHalfCplt_CMockIgnore(void);
#define TIM_DMADelayPulseHalfCplt_StopIgnore() TIM_DMADelayPulseHalfCplt_CMockStopIgnore()
void TIM_DMADelayPulseHalfCplt_CMockStopIgnore(void);
#define TIM_DMADelayPulseHalfCplt_ExpectAndReturn(hdma, cmock_retval) TEST_FAIL_MESSAGE("TIM_DMADelayPulseHalfCplt requires _Expect (not AndReturn)");
#define TIM_DMADelayPulseHalfCplt_Expect(hdma) TIM_DMADelayPulseHalfCplt_CMockExpect(__LINE__, hdma)
void TIM_DMADelayPulseHalfCplt_CMockExpect(UNITY_LINE_TYPE cmock_line, DMA_HandleTypeDef* hdma);
typedef void (* CMOCK_TIM_DMADelayPulseHalfCplt_CALLBACK)(DMA_HandleTypeDef* hdma, int cmock_num_calls);
void TIM_DMADelayPulseHalfCplt_AddCallback(CMOCK_TIM_DMADelayPulseHalfCplt_CALLBACK Callback);
void TIM_DMADelayPulseHalfCplt_Stub(CMOCK_TIM_DMADelayPulseHalfCplt_CALLBACK Callback);
#define TIM_DMADelayPulseHalfCplt_StubWithCallback TIM_DMADelayPulseHalfCplt_Stub
#define TIM_DMAError_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("TIM_DMAError requires _Ignore (not AndReturn)");
#define TIM_DMAError_Ignore() TIM_DMAError_CMockIgnore()
void TIM_DMAError_CMockIgnore(void);
#define TIM_DMAError_StopIgnore() TIM_DMAError_CMockStopIgnore()
void TIM_DMAError_CMockStopIgnore(void);
#define TIM_DMAError_ExpectAndReturn(hdma, cmock_retval) TEST_FAIL_MESSAGE("TIM_DMAError requires _Expect (not AndReturn)");
#define TIM_DMAError_Expect(hdma) TIM_DMAError_CMockExpect(__LINE__, hdma)
void TIM_DMAError_CMockExpect(UNITY_LINE_TYPE cmock_line, DMA_HandleTypeDef* hdma);
typedef void (* CMOCK_TIM_DMAError_CALLBACK)(DMA_HandleTypeDef* hdma, int cmock_num_calls);
void TIM_DMAError_AddCallback(CMOCK_TIM_DMAError_CALLBACK Callback);
void TIM_DMAError_Stub(CMOCK_TIM_DMAError_CALLBACK Callback);
#define TIM_DMAError_StubWithCallback TIM_DMAError_Stub
#define TIM_DMACaptureCplt_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("TIM_DMACaptureCplt requires _Ignore (not AndReturn)");
#define TIM_DMACaptureCplt_Ignore() TIM_DMACaptureCplt_CMockIgnore()
void TIM_DMACaptureCplt_CMockIgnore(void);
#define TIM_DMACaptureCplt_StopIgnore() TIM_DMACaptureCplt_CMockStopIgnore()
void TIM_DMACaptureCplt_CMockStopIgnore(void);
#define TIM_DMACaptureCplt_ExpectAndReturn(hdma, cmock_retval) TEST_FAIL_MESSAGE("TIM_DMACaptureCplt requires _Expect (not AndReturn)");
#define TIM_DMACaptureCplt_Expect(hdma) TIM_DMACaptureCplt_CMockExpect(__LINE__, hdma)
void TIM_DMACaptureCplt_CMockExpect(UNITY_LINE_TYPE cmock_line, DMA_HandleTypeDef* hdma);
typedef void (* CMOCK_TIM_DMACaptureCplt_CALLBACK)(DMA_HandleTypeDef* hdma, int cmock_num_calls);
void TIM_DMACaptureCplt_AddCallback(CMOCK_TIM_DMACaptureCplt_CALLBACK Callback);
void TIM_DMACaptureCplt_Stub(CMOCK_TIM_DMACaptureCplt_CALLBACK Callback);
#define TIM_DMACaptureCplt_StubWithCallback TIM_DMACaptureCplt_Stub
#define TIM_DMACaptureHalfCplt_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("TIM_DMACaptureHalfCplt requires _Ignore (not AndReturn)");
#define TIM_DMACaptureHalfCplt_Ignore() TIM_DMACaptureHalfCplt_CMockIgnore()
void TIM_DMACaptureHalfCplt_CMockIgnore(void);
#define TIM_DMACaptureHalfCplt_StopIgnore() TIM_DMACaptureHalfCplt_CMockStopIgnore()
void TIM_DMACaptureHalfCplt_CMockStopIgnore(void);
#define TIM_DMACaptureHalfCplt_ExpectAndReturn(hdma, cmock_retval) TEST_FAIL_MESSAGE("TIM_DMACaptureHalfCplt requires _Expect (not AndReturn)");
#define TIM_DMACaptureHalfCplt_Expect(hdma) TIM_DMACaptureHalfCplt_CMockExpect(__LINE__, hdma)
void TIM_DMACaptureHalfCplt_CMockExpect(UNITY_LINE_TYPE cmock_line, DMA_HandleTypeDef* hdma);
typedef void (* CMOCK_TIM_DMACaptureHalfCplt_CALLBACK)(DMA_HandleTypeDef* hdma, int cmock_num_calls);
void TIM_DMACaptureHalfCplt_AddCallback(CMOCK_TIM_DMACaptureHalfCplt_CALLBACK Callback);
void TIM_DMACaptureHalfCplt_Stub(CMOCK_TIM_DMACaptureHalfCplt_CALLBACK Callback);
#define TIM_DMACaptureHalfCplt_StubWithCallback TIM_DMACaptureHalfCplt_Stub
#define TIM_CCxChannelCmd_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("TIM_CCxChannelCmd requires _Ignore (not AndReturn)");
#define TIM_CCxChannelCmd_Ignore() TIM_CCxChannelCmd_CMockIgnore()
void TIM_CCxChannelCmd_CMockIgnore(void);
#define TIM_CCxChannelCmd_StopIgnore() TIM_CCxChannelCmd_CMockStopIgnore()
void TIM_CCxChannelCmd_CMockStopIgnore(void);
#define TIM_CCxChannelCmd_ExpectAndReturn(TIMx, Channel, ChannelState, cmock_retval) TEST_FAIL_MESSAGE("TIM_CCxChannelCmd requires _Expect (not AndReturn)");
#define TIM_CCxChannelCmd_Expect(TIMx, Channel, ChannelState) TIM_CCxChannelCmd_CMockExpect(__LINE__, TIMx, Channel, ChannelState)
void TIM_CCxChannelCmd_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState);
typedef void (* CMOCK_TIM_CCxChannelCmd_CALLBACK)(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState, int cmock_num_calls);
void TIM_CCxChannelCmd_AddCallback(CMOCK_TIM_CCxChannelCmd_CALLBACK Callback);
void TIM_CCxChannelCmd_Stub(CMOCK_TIM_CCxChannelCmd_CALLBACK Callback);
#define TIM_CCxChannelCmd_StubWithCallback TIM_CCxChannelCmd_Stub
#define __HAL_TIM_SET_COMPARE_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("__HAL_TIM_SET_COMPARE requires _Ignore (not AndReturn)");
#define __HAL_TIM_SET_COMPARE_Ignore() __HAL_TIM_SET_COMPARE_CMockIgnore()
void __HAL_TIM_SET_COMPARE_CMockIgnore(void);
#define __HAL_TIM_SET_COMPARE_StopIgnore() __HAL_TIM_SET_COMPARE_CMockStopIgnore()
void __HAL_TIM_SET_COMPARE_CMockStopIgnore(void);
#define __HAL_TIM_SET_COMPARE_ExpectAndReturn(htim, Channel, pulse, cmock_retval) TEST_FAIL_MESSAGE("__HAL_TIM_SET_COMPARE requires _Expect (not AndReturn)");
#define __HAL_TIM_SET_COMPARE_Expect(htim, Channel, pulse) __HAL_TIM_SET_COMPARE_CMockExpect(__LINE__, htim, Channel, pulse)
void __HAL_TIM_SET_COMPARE_CMockExpect(UNITY_LINE_TYPE cmock_line, TIM_HandleTypeDef* htim, uint32_t Channel, uint16_t pulse);
typedef void (* CMOCK___HAL_TIM_SET_COMPARE_CALLBACK)(TIM_HandleTypeDef* htim, uint32_t Channel, uint16_t pulse, int cmock_num_calls);
void __HAL_TIM_SET_COMPARE_AddCallback(CMOCK___HAL_TIM_SET_COMPARE_CALLBACK Callback);
void __HAL_TIM_SET_COMPARE_Stub(CMOCK___HAL_TIM_SET_COMPARE_CALLBACK Callback);
#define __HAL_TIM_SET_COMPARE_StubWithCallback __HAL_TIM_SET_COMPARE_Stub
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
void __HAL_TIM_SET_COMPARE(TIM_HandleTypeDef *htim, uint32_t Channel, uint16_t pulse);
#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
